# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Freestyle', [dirname(__file__)])
        except ImportError:
            import _Freestyle
            return _Freestyle
        if fp is not None:
            try:
                _mod = imp.load_module('_Freestyle', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Freestyle = swig_import_helper()
    del swig_import_helper
else:
    import _Freestyle
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Freestyle.SwigPyIterator_value(self)
    def incr(self, n=1): return _Freestyle.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _Freestyle.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Freestyle.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Freestyle.SwigPyIterator_equal(self, *args)
    def copy(self): return _Freestyle.SwigPyIterator_copy(self)
    def next(self): return _Freestyle.SwigPyIterator_next(self)
    def __next__(self): return _Freestyle.SwigPyIterator___next__(self)
    def previous(self): return _Freestyle.SwigPyIterator_previous(self)
    def advance(self, *args): return _Freestyle.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Freestyle.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Freestyle.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Freestyle.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Freestyle.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Freestyle.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _Freestyle.vectorInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Freestyle.vectorInt___nonzero__(self)
    def __bool__(self): return _Freestyle.vectorInt___bool__(self)
    def __len__(self): return _Freestyle.vectorInt___len__(self)
    def pop(self): return _Freestyle.vectorInt_pop(self)
    def __getslice__(self, *args): return _Freestyle.vectorInt___getslice__(self, *args)
    def __setslice__(self, *args): return _Freestyle.vectorInt___setslice__(self, *args)
    def __delslice__(self, *args): return _Freestyle.vectorInt___delslice__(self, *args)
    def __delitem__(self, *args): return _Freestyle.vectorInt___delitem__(self, *args)
    def __getitem__(self, *args): return _Freestyle.vectorInt___getitem__(self, *args)
    def __setitem__(self, *args): return _Freestyle.vectorInt___setitem__(self, *args)
    def append(self, *args): return _Freestyle.vectorInt_append(self, *args)
    def empty(self): return _Freestyle.vectorInt_empty(self)
    def size(self): return _Freestyle.vectorInt_size(self)
    def clear(self): return _Freestyle.vectorInt_clear(self)
    def swap(self, *args): return _Freestyle.vectorInt_swap(self, *args)
    def get_allocator(self): return _Freestyle.vectorInt_get_allocator(self)
    def begin(self): return _Freestyle.vectorInt_begin(self)
    def end(self): return _Freestyle.vectorInt_end(self)
    def rbegin(self): return _Freestyle.vectorInt_rbegin(self)
    def rend(self): return _Freestyle.vectorInt_rend(self)
    def pop_back(self): return _Freestyle.vectorInt_pop_back(self)
    def erase(self, *args): return _Freestyle.vectorInt_erase(self, *args)
    def __init__(self, *args): 
        this = _Freestyle.new_vectorInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Freestyle.vectorInt_push_back(self, *args)
    def front(self): return _Freestyle.vectorInt_front(self)
    def back(self): return _Freestyle.vectorInt_back(self)
    def assign(self, *args): return _Freestyle.vectorInt_assign(self, *args)
    def resize(self, *args): return _Freestyle.vectorInt_resize(self, *args)
    def insert(self, *args): return _Freestyle.vectorInt_insert(self, *args)
    def reserve(self, *args): return _Freestyle.vectorInt_reserve(self, *args)
    def capacity(self): return _Freestyle.vectorInt_capacity(self)
    __swig_destroy__ = _Freestyle.delete_vectorInt
    __del__ = lambda self : None;
vectorInt_swigregister = _Freestyle.vectorInt_swigregister
vectorInt_swigregister(vectorInt)

class Matrix4x4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix4x4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix4x4, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _Freestyle.Matrix4x4_data_set
    __swig_getmethods__["data"] = _Freestyle.Matrix4x4_data_get
    if _newclass:data = _swig_property(_Freestyle.Matrix4x4_data_get, _Freestyle.Matrix4x4_data_set)
    def __init__(self, *args): 
        this = _Freestyle.new_Matrix4x4(*args)
        try: self.this.append(this)
        except: self.this = this
    def __mul__(self, *args): return _Freestyle.Matrix4x4___mul__(self, *args)
    def _print(self): return _Freestyle.Matrix4x4__print(self)
    __swig_destroy__ = _Freestyle.delete_Matrix4x4
    __del__ = lambda self : None;
Matrix4x4_swigregister = _Freestyle.Matrix4x4_swigregister
Matrix4x4_swigregister(Matrix4x4)


def addStyleFS(*args):
  return _Freestyle.addStyleFS(*args)
addStyleFS = _Freestyle.addStyleFS

def clearStylesFS():
  return _Freestyle.clearStylesFS()
clearStylesFS = _Freestyle.clearStylesFS

def run(*args):
  return _Freestyle.run(*args)
run = _Freestyle.run
class Id(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Id, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Id, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Id(*args)
        try: self.this.append(this)
        except: self.this = this
    def getFirst(self): return _Freestyle.Id_getFirst(self)
    def getSecond(self): return _Freestyle.Id_getSecond(self)
    def setFirst(self, *args): return _Freestyle.Id_setFirst(self, *args)
    def setSecond(self, *args): return _Freestyle.Id_setSecond(self, *args)
    def __eq__(self, *args): return _Freestyle.Id___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Id___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Id___lt__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Id
    __del__ = lambda self : None;
Id_swigregister = _Freestyle.Id_swigregister
Id_swigregister(Id)

class Vec_2u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_2u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_2u, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Vec_2u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_2u
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_2u_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_2u_dim)
    def norm(self): return _Freestyle.Vec_2u_norm(self)
    def squareNorm(self): return _Freestyle.Vec_2u_squareNorm(self)
    def normalize(self): return _Freestyle.Vec_2u_normalize(self)
    def normalizeSafe(self): return _Freestyle.Vec_2u_normalizeSafe(self)
    def __add__(self, *args): return _Freestyle.Vec_2u___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec_2u___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec_2u___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec_2u___mul__(self, *args)
    def printFloat(self): return _Freestyle.Vec_2u_printFloat(self)
    def __eq__(self, *args): return _Freestyle.Vec_2u___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Vec_2u___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Vec_2u___lt__(self, *args)
    def __gt__(self, *args): return _Freestyle.Vec_2u___gt__(self, *args)
Vec_2u_swigregister = _Freestyle.Vec_2u_swigregister
Vec_2u_swigregister(Vec_2u)

def Vec_2u_dim():
  return _Freestyle.Vec_2u_dim()
Vec_2u_dim = _Freestyle.Vec_2u_dim

class Vec_2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_2i, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Vec_2i()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_2i
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_2i_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_2i_dim)
    def norm(self): return _Freestyle.Vec_2i_norm(self)
    def squareNorm(self): return _Freestyle.Vec_2i_squareNorm(self)
    def normalize(self): return _Freestyle.Vec_2i_normalize(self)
    def normalizeSafe(self): return _Freestyle.Vec_2i_normalizeSafe(self)
    def __add__(self, *args): return _Freestyle.Vec_2i___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec_2i___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec_2i___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec_2i___mul__(self, *args)
    def printFloat(self): return _Freestyle.Vec_2i_printFloat(self)
    def __eq__(self, *args): return _Freestyle.Vec_2i___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Vec_2i___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Vec_2i___lt__(self, *args)
    def __gt__(self, *args): return _Freestyle.Vec_2i___gt__(self, *args)
Vec_2i_swigregister = _Freestyle.Vec_2i_swigregister
Vec_2i_swigregister(Vec_2i)

def Vec_2i_dim():
  return _Freestyle.Vec_2i_dim()
Vec_2i_dim = _Freestyle.Vec_2i_dim

class Vec_2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_2d, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Vec_2d()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_2d
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_2d_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_2d_dim)
    def norm(self): return _Freestyle.Vec_2d_norm(self)
    def squareNorm(self): return _Freestyle.Vec_2d_squareNorm(self)
    def normalize(self): return _Freestyle.Vec_2d_normalize(self)
    def normalizeSafe(self): return _Freestyle.Vec_2d_normalizeSafe(self)
    def __add__(self, *args): return _Freestyle.Vec_2d___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec_2d___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec_2d___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec_2d___mul__(self, *args)
    def printFloat(self): return _Freestyle.Vec_2d_printFloat(self)
    def __eq__(self, *args): return _Freestyle.Vec_2d___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Vec_2d___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Vec_2d___lt__(self, *args)
    def __gt__(self, *args): return _Freestyle.Vec_2d___gt__(self, *args)
Vec_2d_swigregister = _Freestyle.Vec_2d_swigregister
Vec_2d_swigregister(Vec_2d)

def Vec_2d_dim():
  return _Freestyle.Vec_2d_dim()
Vec_2d_dim = _Freestyle.Vec_2d_dim

class Vec_2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_2f, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Vec_2f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_2f
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_2f_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_2f_dim)
    def norm(self): return _Freestyle.Vec_2f_norm(self)
    def squareNorm(self): return _Freestyle.Vec_2f_squareNorm(self)
    def normalize(self): return _Freestyle.Vec_2f_normalize(self)
    def normalizeSafe(self): return _Freestyle.Vec_2f_normalizeSafe(self)
    def __add__(self, *args): return _Freestyle.Vec_2f___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec_2f___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec_2f___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec_2f___mul__(self, *args)
    def printFloat(self): return _Freestyle.Vec_2f_printFloat(self)
    def __eq__(self, *args): return _Freestyle.Vec_2f___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Vec_2f___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Vec_2f___lt__(self, *args)
    def __gt__(self, *args): return _Freestyle.Vec_2f___gt__(self, *args)
Vec_2f_swigregister = _Freestyle.Vec_2f_swigregister
Vec_2f_swigregister(Vec_2f)

def Vec_2f_dim():
  return _Freestyle.Vec_2f_dim()
Vec_2f_dim = _Freestyle.Vec_2f_dim

class Vec2u(Vec_2u):
    __swig_setmethods__ = {}
    for _s in [Vec_2u]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2u, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_2u]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2u, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec2u(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _Freestyle.Vec2u_x(self, *args)
    def y(self, *args): return _Freestyle.Vec2u_y(self, *args)
    def setX(self, *args): return _Freestyle.Vec2u_setX(self, *args)
    def setY(self, *args): return _Freestyle.Vec2u_setY(self, *args)
    def __add__(self, *args): return _Freestyle.Vec2u___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec2u___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec2u___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec2u___mul__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Vec2u
    __del__ = lambda self : None;
Vec2u_swigregister = _Freestyle.Vec2u_swigregister
Vec2u_swigregister(Vec2u)

class Vec2i(Vec_2i):
    __swig_setmethods__ = {}
    for _s in [Vec_2i]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2i, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_2i]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec2i(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _Freestyle.Vec2i_x(self, *args)
    def y(self, *args): return _Freestyle.Vec2i_y(self, *args)
    def setX(self, *args): return _Freestyle.Vec2i_setX(self, *args)
    def setY(self, *args): return _Freestyle.Vec2i_setY(self, *args)
    def __add__(self, *args): return _Freestyle.Vec2i___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec2i___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec2i___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec2i___mul__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Vec2i
    __del__ = lambda self : None;
Vec2i_swigregister = _Freestyle.Vec2i_swigregister
Vec2i_swigregister(Vec2i)

class Vec2f(Vec_2f):
    __swig_setmethods__ = {}
    for _s in [Vec_2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2f, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec2f(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _Freestyle.Vec2f_x(self, *args)
    def y(self, *args): return _Freestyle.Vec2f_y(self, *args)
    def setX(self, *args): return _Freestyle.Vec2f_setX(self, *args)
    def setY(self, *args): return _Freestyle.Vec2f_setY(self, *args)
    def __add__(self, *args): return _Freestyle.Vec2f___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec2f___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec2f___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec2f___mul__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Vec2f
    __del__ = lambda self : None;
Vec2f_swigregister = _Freestyle.Vec2f_swigregister
Vec2f_swigregister(Vec2f)

class Vec2d(Vec_2d):
    __swig_setmethods__ = {}
    for _s in [Vec_2d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec2d, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_2d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec2d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec2d(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _Freestyle.Vec2d_x(self, *args)
    def y(self, *args): return _Freestyle.Vec2d_y(self, *args)
    def setX(self, *args): return _Freestyle.Vec2d_setX(self, *args)
    def setY(self, *args): return _Freestyle.Vec2d_setY(self, *args)
    def __add__(self, *args): return _Freestyle.Vec2d___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec2d___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec2d___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec2d___mul__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Vec2d
    __del__ = lambda self : None;
Vec2d_swigregister = _Freestyle.Vec2d_swigregister
Vec2d_swigregister(Vec2d)

class Vec_3u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_3u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_3u, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Vec_3u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_3u
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_3u_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_3u_dim)
    def norm(self): return _Freestyle.Vec_3u_norm(self)
    def squareNorm(self): return _Freestyle.Vec_3u_squareNorm(self)
    def normalize(self): return _Freestyle.Vec_3u_normalize(self)
    def normalizeSafe(self): return _Freestyle.Vec_3u_normalizeSafe(self)
    def __add__(self, *args): return _Freestyle.Vec_3u___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec_3u___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec_3u___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec_3u___mul__(self, *args)
    def printFloat(self): return _Freestyle.Vec_3u_printFloat(self)
    def __eq__(self, *args): return _Freestyle.Vec_3u___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Vec_3u___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Vec_3u___lt__(self, *args)
    def __gt__(self, *args): return _Freestyle.Vec_3u___gt__(self, *args)
Vec_3u_swigregister = _Freestyle.Vec_3u_swigregister
Vec_3u_swigregister(Vec_3u)

def Vec_3u_dim():
  return _Freestyle.Vec_3u_dim()
Vec_3u_dim = _Freestyle.Vec_3u_dim

class Vec_3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_3i, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Vec_3i()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_3i
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_3i_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_3i_dim)
    def norm(self): return _Freestyle.Vec_3i_norm(self)
    def squareNorm(self): return _Freestyle.Vec_3i_squareNorm(self)
    def normalize(self): return _Freestyle.Vec_3i_normalize(self)
    def normalizeSafe(self): return _Freestyle.Vec_3i_normalizeSafe(self)
    def __add__(self, *args): return _Freestyle.Vec_3i___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec_3i___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec_3i___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec_3i___mul__(self, *args)
    def printFloat(self): return _Freestyle.Vec_3i_printFloat(self)
    def __eq__(self, *args): return _Freestyle.Vec_3i___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Vec_3i___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Vec_3i___lt__(self, *args)
    def __gt__(self, *args): return _Freestyle.Vec_3i___gt__(self, *args)
Vec_3i_swigregister = _Freestyle.Vec_3i_swigregister
Vec_3i_swigregister(Vec_3i)

def Vec_3i_dim():
  return _Freestyle.Vec_3i_dim()
Vec_3i_dim = _Freestyle.Vec_3i_dim

class Vec_3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_3d, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Vec_3d()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_3d
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_3d_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_3d_dim)
    def norm(self): return _Freestyle.Vec_3d_norm(self)
    def squareNorm(self): return _Freestyle.Vec_3d_squareNorm(self)
    def normalize(self): return _Freestyle.Vec_3d_normalize(self)
    def normalizeSafe(self): return _Freestyle.Vec_3d_normalizeSafe(self)
    def __add__(self, *args): return _Freestyle.Vec_3d___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec_3d___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec_3d___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec_3d___mul__(self, *args)
    def printFloat(self): return _Freestyle.Vec_3d_printFloat(self)
    def __eq__(self, *args): return _Freestyle.Vec_3d___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Vec_3d___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Vec_3d___lt__(self, *args)
    def __gt__(self, *args): return _Freestyle.Vec_3d___gt__(self, *args)
Vec_3d_swigregister = _Freestyle.Vec_3d_swigregister
Vec_3d_swigregister(Vec_3d)

def Vec_3d_dim():
  return _Freestyle.Vec_3d_dim()
Vec_3d_dim = _Freestyle.Vec_3d_dim

class Vec_3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec_3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vec_3f, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Vec_3f()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Vec_3f
    __del__ = lambda self : None;
    __swig_getmethods__["dim"] = lambda x: _Freestyle.Vec_3f_dim
    if _newclass:dim = staticmethod(_Freestyle.Vec_3f_dim)
    def norm(self): return _Freestyle.Vec_3f_norm(self)
    def squareNorm(self): return _Freestyle.Vec_3f_squareNorm(self)
    def normalize(self): return _Freestyle.Vec_3f_normalize(self)
    def normalizeSafe(self): return _Freestyle.Vec_3f_normalizeSafe(self)
    def __add__(self, *args): return _Freestyle.Vec_3f___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec_3f___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec_3f___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec_3f___mul__(self, *args)
    def printFloat(self): return _Freestyle.Vec_3f_printFloat(self)
    def __eq__(self, *args): return _Freestyle.Vec_3f___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Vec_3f___ne__(self, *args)
    def __lt__(self, *args): return _Freestyle.Vec_3f___lt__(self, *args)
    def __gt__(self, *args): return _Freestyle.Vec_3f___gt__(self, *args)
Vec_3f_swigregister = _Freestyle.Vec_3f_swigregister
Vec_3f_swigregister(Vec_3f)

def Vec_3f_dim():
  return _Freestyle.Vec_3f_dim()
Vec_3f_dim = _Freestyle.Vec_3f_dim

class Vec3u(Vec_3u):
    __swig_setmethods__ = {}
    for _s in [Vec_3u]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3u, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_3u]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3u, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec3u(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _Freestyle.Vec3u_x(self, *args)
    def y(self, *args): return _Freestyle.Vec3u_y(self, *args)
    def z(self, *args): return _Freestyle.Vec3u_z(self, *args)
    def setX(self, *args): return _Freestyle.Vec3u_setX(self, *args)
    def setY(self, *args): return _Freestyle.Vec3u_setY(self, *args)
    def setZ(self, *args): return _Freestyle.Vec3u_setZ(self, *args)
    def __add__(self, *args): return _Freestyle.Vec3u___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec3u___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec3u___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec3u___mul__(self, *args)
    def __xor__(self, *args): return _Freestyle.Vec3u___xor__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Vec3u
    __del__ = lambda self : None;
Vec3u_swigregister = _Freestyle.Vec3u_swigregister
Vec3u_swigregister(Vec3u)

class Vec3i(Vec_3i):
    __swig_setmethods__ = {}
    for _s in [Vec_3i]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3i, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_3i]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3i, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec3i(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _Freestyle.Vec3i_x(self, *args)
    def y(self, *args): return _Freestyle.Vec3i_y(self, *args)
    def z(self, *args): return _Freestyle.Vec3i_z(self, *args)
    def setX(self, *args): return _Freestyle.Vec3i_setX(self, *args)
    def setY(self, *args): return _Freestyle.Vec3i_setY(self, *args)
    def setZ(self, *args): return _Freestyle.Vec3i_setZ(self, *args)
    def __add__(self, *args): return _Freestyle.Vec3i___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec3i___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec3i___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec3i___mul__(self, *args)
    def __xor__(self, *args): return _Freestyle.Vec3i___xor__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Vec3i
    __del__ = lambda self : None;
Vec3i_swigregister = _Freestyle.Vec3i_swigregister
Vec3i_swigregister(Vec3i)

class Vec3f(Vec_3f):
    __swig_setmethods__ = {}
    for _s in [Vec_3f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3f, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_3f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec3f(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _Freestyle.Vec3f_x(self, *args)
    def y(self, *args): return _Freestyle.Vec3f_y(self, *args)
    def z(self, *args): return _Freestyle.Vec3f_z(self, *args)
    def setX(self, *args): return _Freestyle.Vec3f_setX(self, *args)
    def setY(self, *args): return _Freestyle.Vec3f_setY(self, *args)
    def setZ(self, *args): return _Freestyle.Vec3f_setZ(self, *args)
    def __add__(self, *args): return _Freestyle.Vec3f___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec3f___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec3f___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec3f___mul__(self, *args)
    def __xor__(self, *args): return _Freestyle.Vec3f___xor__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Vec3f
    __del__ = lambda self : None;
Vec3f_swigregister = _Freestyle.Vec3f_swigregister
Vec3f_swigregister(Vec3f)

class Vec3d(Vec_3d):
    __swig_setmethods__ = {}
    for _s in [Vec_3d]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vec3d, name, value)
    __swig_getmethods__ = {}
    for _s in [Vec_3d]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vec3d, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Vec3d(*args)
        try: self.this.append(this)
        except: self.this = this
    def x(self, *args): return _Freestyle.Vec3d_x(self, *args)
    def y(self, *args): return _Freestyle.Vec3d_y(self, *args)
    def z(self, *args): return _Freestyle.Vec3d_z(self, *args)
    def setX(self, *args): return _Freestyle.Vec3d_setX(self, *args)
    def setY(self, *args): return _Freestyle.Vec3d_setY(self, *args)
    def setZ(self, *args): return _Freestyle.Vec3d_setZ(self, *args)
    def __add__(self, *args): return _Freestyle.Vec3d___add__(self, *args)
    def __sub__(self, *args): return _Freestyle.Vec3d___sub__(self, *args)
    def __div__(self, *args): return _Freestyle.Vec3d___div__(self, *args)
    def __mul__(self, *args): return _Freestyle.Vec3d___mul__(self, *args)
    def __xor__(self, *args): return _Freestyle.Vec3d___xor__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Vec3d
    __del__ = lambda self : None;
Vec3d_swigregister = _Freestyle.Vec3d_swigregister
Vec3d_swigregister(Vec3d)

_Noise_B_ = _Freestyle._Noise_B_
class Noise(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Noise, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Noise, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_Noise()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Noise
    __del__ = lambda self : None;
    def turbulence1(self, *args): return _Freestyle.Noise_turbulence1(self, *args)
    def turbulence2(self, *args): return _Freestyle.Noise_turbulence2(self, *args)
    def turbulence3(self, *args): return _Freestyle.Noise_turbulence3(self, *args)
    def smoothNoise1(self, *args): return _Freestyle.Noise_smoothNoise1(self, *args)
    def smoothNoise2(self, *args): return _Freestyle.Noise_smoothNoise2(self, *args)
    def smoothNoise3(self, *args): return _Freestyle.Noise_smoothNoise3(self, *args)
Noise_swigregister = _Freestyle.Noise_swigregister
Noise_swigregister(Noise)

class Material(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Material(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Material
    __del__ = lambda self : None;
    def diffuse(self): return _Freestyle.Material_diffuse(self)
    def diffuseR(self): return _Freestyle.Material_diffuseR(self)
    def diffuseG(self): return _Freestyle.Material_diffuseG(self)
    def diffuseB(self): return _Freestyle.Material_diffuseB(self)
    def diffuseA(self): return _Freestyle.Material_diffuseA(self)
    def specular(self): return _Freestyle.Material_specular(self)
    def specularR(self): return _Freestyle.Material_specularR(self)
    def specularG(self): return _Freestyle.Material_specularG(self)
    def specularB(self): return _Freestyle.Material_specularB(self)
    def specularA(self): return _Freestyle.Material_specularA(self)
    def ambient(self): return _Freestyle.Material_ambient(self)
    def ambientR(self): return _Freestyle.Material_ambientR(self)
    def ambientG(self): return _Freestyle.Material_ambientG(self)
    def ambientB(self): return _Freestyle.Material_ambientB(self)
    def ambientA(self): return _Freestyle.Material_ambientA(self)
    def emission(self): return _Freestyle.Material_emission(self)
    def emissionR(self): return _Freestyle.Material_emissionR(self)
    def emissionG(self): return _Freestyle.Material_emissionG(self)
    def emissionB(self): return _Freestyle.Material_emissionB(self)
    def emissionA(self): return _Freestyle.Material_emissionA(self)
    def shininess(self): return _Freestyle.Material_shininess(self)
    def SetDiffuse(self, *args): return _Freestyle.Material_SetDiffuse(self, *args)
    def SetSpecular(self, *args): return _Freestyle.Material_SetSpecular(self, *args)
    def SetAmbient(self, *args): return _Freestyle.Material_SetAmbient(self, *args)
    def SetEmission(self, *args): return _Freestyle.Material_SetEmission(self, *args)
    def SetShininess(self, *args): return _Freestyle.Material_SetShininess(self, *args)
    def __ne__(self, *args): return _Freestyle.Material___ne__(self, *args)
    def __eq__(self, *args): return _Freestyle.Material___eq__(self, *args)
Material_swigregister = _Freestyle.Material_swigregister
Material_swigregister(Material)

class Interface0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface0D, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.Interface0D_getExactTypeName(self)
    def getX(self): return _Freestyle.Interface0D_getX(self)
    def getY(self): return _Freestyle.Interface0D_getY(self)
    def getZ(self): return _Freestyle.Interface0D_getZ(self)
    def getPoint3D(self): return _Freestyle.Interface0D_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.Interface0D_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.Interface0D_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.Interface0D_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.Interface0D_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.Interface0D_getFEdge(self, *args)
    def getId(self): return _Freestyle.Interface0D_getId(self)
    def getNature(self): return _Freestyle.Interface0D_getNature(self)
    def castToSVertex(self): return _Freestyle.Interface0D_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.Interface0D_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.Interface0D_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.Interface0D_castToTVertex(self)
    def __init__(self): 
        this = _Freestyle.new_Interface0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Interface0D
    __del__ = lambda self : None;
Interface0D_swigregister = _Freestyle.Interface0D_swigregister
Interface0D_swigregister(Interface0D)
cvar = _Freestyle.cvar
POINT = cvar.POINT
S_VERTEX = cvar.S_VERTEX
VIEW_VERTEX = cvar.VIEW_VERTEX
NON_T_VERTEX = cvar.NON_T_VERTEX
T_VERTEX = cvar.T_VERTEX
CUSP = cvar.CUSP
PO_BOUNDARY = cvar.PO_BOUNDARY
AMBIG_CUSP = cvar.AMBIG_CUSP
NO_FEATURE = cvar.NO_FEATURE
SILHOUETTE = cvar.SILHOUETTE
BORDER = cvar.BORDER
CREASE = cvar.CREASE
RIDGE = cvar.RIDGE
VALLEY = cvar.VALLEY
SUGGESTIVE_CONTOUR = cvar.SUGGESTIVE_CONTOUR
SURFACE_INTERSECTION = cvar.SURFACE_INTERSECTION
PO_SURFACE_INTERSECTION = cvar.PO_SURFACE_INTERSECTION
ALL_INTERSECTION = cvar.ALL_INTERSECTION

class Interface0DIteratorNested(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface0DIteratorNested, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface0DIteratorNested, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_Interface0DIteratorNested
    __del__ = lambda self : None;
    def getExactTypeName(self): return _Freestyle.Interface0DIteratorNested_getExactTypeName(self)
    def getObject(self): return _Freestyle.Interface0DIteratorNested_getObject(self)
    def __deref__(self): return _Freestyle.Interface0DIteratorNested___deref__(self)
    def increment(self): return _Freestyle.Interface0DIteratorNested_increment(self)
    def decrement(self): return _Freestyle.Interface0DIteratorNested_decrement(self)
    def isBegin(self): return _Freestyle.Interface0DIteratorNested_isBegin(self)
    def isEnd(self): return _Freestyle.Interface0DIteratorNested_isEnd(self)
    def __eq__(self, *args): return _Freestyle.Interface0DIteratorNested___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Interface0DIteratorNested___ne__(self, *args)
    def t(self): return _Freestyle.Interface0DIteratorNested_t(self)
    def u(self): return _Freestyle.Interface0DIteratorNested_u(self)
    def copy(self): return _Freestyle.Interface0DIteratorNested_copy(self)
    def getX(self): return _Freestyle.Interface0DIteratorNested_getX(self)
    def getY(self): return _Freestyle.Interface0DIteratorNested_getY(self)
    def getZ(self): return _Freestyle.Interface0DIteratorNested_getZ(self)
    def getPoint3D(self): return _Freestyle.Interface0DIteratorNested_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.Interface0DIteratorNested_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.Interface0DIteratorNested_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.Interface0DIteratorNested_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.Interface0DIteratorNested_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.Interface0DIteratorNested_getFEdge(self, *args)
    def getId(self): return _Freestyle.Interface0DIteratorNested_getId(self)
    def getNature(self): return _Freestyle.Interface0DIteratorNested_getNature(self)
    def castToSVertex(self): return _Freestyle.Interface0DIteratorNested_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.Interface0DIteratorNested_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.Interface0DIteratorNested_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.Interface0DIteratorNested_castToTVertex(self)
Interface0DIteratorNested_swigregister = _Freestyle.Interface0DIteratorNested_swigregister
Interface0DIteratorNested_swigregister(Interface0DIteratorNested)

class Interface0DIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface0DIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface0DIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Interface0DIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Interface0DIterator
    __del__ = lambda self : None;
    def getExactTypeName(self): return _Freestyle.Interface0DIterator_getExactTypeName(self)
    def getObject(self): return _Freestyle.Interface0DIterator_getObject(self)
    def __deref__(self): return _Freestyle.Interface0DIterator___deref__(self)
    def increment(self): return _Freestyle.Interface0DIterator_increment(self)
    def decrement(self): return _Freestyle.Interface0DIterator_decrement(self)
    def isBegin(self): return _Freestyle.Interface0DIterator_isBegin(self)
    def isEnd(self): return _Freestyle.Interface0DIterator_isEnd(self)
    def __eq__(self, *args): return _Freestyle.Interface0DIterator___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.Interface0DIterator___ne__(self, *args)
    def t(self): return _Freestyle.Interface0DIterator_t(self)
    def u(self): return _Freestyle.Interface0DIterator_u(self)
    def getX(self): return _Freestyle.Interface0DIterator_getX(self)
    def getY(self): return _Freestyle.Interface0DIterator_getY(self)
    def getZ(self): return _Freestyle.Interface0DIterator_getZ(self)
    def getPoint3D(self): return _Freestyle.Interface0DIterator_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.Interface0DIterator_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.Interface0DIterator_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.Interface0DIterator_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.Interface0DIterator_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.Interface0DIterator_getFEdge(self, *args)
    def getId(self): return _Freestyle.Interface0DIterator_getId(self)
    def getNature(self): return _Freestyle.Interface0DIterator_getNature(self)
    def castToSVertex(self): return _Freestyle.Interface0DIterator_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.Interface0DIterator_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.Interface0DIterator_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.Interface0DIterator_castToTVertex(self)
Interface0DIterator_swigregister = _Freestyle.Interface0DIterator_swigregister
Interface0DIterator_swigregister(Interface0DIterator)

MEAN = _Freestyle.MEAN
MIN = _Freestyle.MIN
MAX = _Freestyle.MAX
FIRST = _Freestyle.FIRST
LAST = _Freestyle.LAST
class Interface1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Interface1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Interface1D, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_Interface1D
    __del__ = lambda self : None;
    __swig_getmethods__["printRefStats"] = lambda x: _Freestyle.Interface1D_printRefStats
    if _newclass:printRefStats = staticmethod(_Freestyle.Interface1D_printRefStats)
    __swig_getmethods__["eraseAllI1Ds"] = lambda x: _Freestyle.Interface1D_eraseAllI1Ds
    if _newclass:eraseAllI1Ds = staticmethod(_Freestyle.Interface1D_eraseAllI1Ds)
    def getExactTypeName(self): return _Freestyle.Interface1D_getExactTypeName(self)
    def verticesBegin(self): return _Freestyle.Interface1D_verticesBegin(self)
    def verticesEnd(self): return _Freestyle.Interface1D_verticesEnd(self)
    def pointsBegin(self, t=0.): return _Freestyle.Interface1D_pointsBegin(self, t)
    def pointsEnd(self, t=0.): return _Freestyle.Interface1D_pointsEnd(self, t)
    def getLength2D(self): return _Freestyle.Interface1D_getLength2D(self)
    def getId(self): return _Freestyle.Interface1D_getId(self)
    def getNature(self): return _Freestyle.Interface1D_getNature(self)
    def getTimeStamp(self): return _Freestyle.Interface1D_getTimeStamp(self)
    def setTimeStamp(self, *args): return _Freestyle.Interface1D_setTimeStamp(self, *args)
Interface1D_swigregister = _Freestyle.Interface1D_swigregister
Interface1D_swigregister(Interface1D)

def Interface1D_printRefStats():
  return _Freestyle.Interface1D_printRefStats()
Interface1D_printRefStats = _Freestyle.Interface1D_printRefStats

def Interface1D_eraseAllI1Ds():
  return _Freestyle.Interface1D_eraseAllI1Ds()
Interface1D_eraseAllI1Ds = _Freestyle.Interface1D_eraseAllI1Ds


def integrateUnsigned(*args):
  return _Freestyle.integrateUnsigned(*args)
integrateUnsigned = _Freestyle.integrateUnsigned

def integrateFloat(*args):
  return _Freestyle.integrateFloat(*args)
integrateFloat = _Freestyle.integrateFloat

def integrateDouble(*args):
  return _Freestyle.integrateDouble(*args)
integrateDouble = _Freestyle.integrateDouble
class SVertex(Interface0D):
    __swig_setmethods__ = {}
    for _s in [Interface0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SVertex, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.SVertex_getExactTypeName(self)
    def getX(self): return _Freestyle.SVertex_getX(self)
    def getY(self): return _Freestyle.SVertex_getY(self)
    def getZ(self): return _Freestyle.SVertex_getZ(self)
    def getPoint3D(self): return _Freestyle.SVertex_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.SVertex_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.SVertex_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.SVertex_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.SVertex_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.SVertex_getFEdge(self, *args)
    def getId(self): return _Freestyle.SVertex_getId(self)
    def getNature(self): return _Freestyle.SVertex_getNature(self)
    def castToSVertex(self): return _Freestyle.SVertex_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.SVertex_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.SVertex_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.SVertex_castToTVertex(self)
    __swig_setmethods__["userdata"] = _Freestyle.SVertex_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.SVertex_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.SVertex_userdata_get, _Freestyle.SVertex_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_SVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_SVertex
    __del__ = lambda self : None;
    def dupplicate(self): return _Freestyle.SVertex_dupplicate(self)
    def __eq__(self, *args): return _Freestyle.SVertex___eq__(self, *args)
    def point3D(self): return _Freestyle.SVertex_point3D(self)
    def point2D(self): return _Freestyle.SVertex_point2D(self)
    def normals(self): return _Freestyle.SVertex_normals(self)
    def normalsSize(self): return _Freestyle.SVertex_normalsSize(self)
    def fedges(self): return _Freestyle.SVertex_fedges(self)
    def fedges_begin(self): return _Freestyle.SVertex_fedges_begin(self)
    def fedges_end(self): return _Freestyle.SVertex_fedges_end(self)
    def z(self): return _Freestyle.SVertex_z(self)
    def viewvertex(self): return _Freestyle.SVertex_viewvertex(self)
    def SetPoint3D(self, *args): return _Freestyle.SVertex_SetPoint3D(self, *args)
    def SetPoint2D(self, *args): return _Freestyle.SVertex_SetPoint2D(self, *args)
    def AddNormal(self, *args): return _Freestyle.SVertex_AddNormal(self, *args)
    def setCurvatureInfo(self, *args): return _Freestyle.SVertex_setCurvatureInfo(self, *args)
    def getCurvatureInfo(self): return _Freestyle.SVertex_getCurvatureInfo(self)
    def GetIsophoteDistance(self, *args): return _Freestyle.SVertex_GetIsophoteDistance(self, *args)
    def ImageSpaceNormal(self): return _Freestyle.SVertex_ImageSpaceNormal(self)
    def setCurvatureFredo(self, *args): return _Freestyle.SVertex_setCurvatureFredo(self, *args)
    def setDirectionFredo(self, *args): return _Freestyle.SVertex_setDirectionFredo(self, *args)
    def curvatureFredo(self): return _Freestyle.SVertex_curvatureFredo(self)
    def directionFredo(self): return _Freestyle.SVertex_directionFredo(self)
    def SetId(self, *args): return _Freestyle.SVertex_SetId(self, *args)
    def SetFEdges(self, *args): return _Freestyle.SVertex_SetFEdges(self, *args)
    def SetShape(self, *args): return _Freestyle.SVertex_SetShape(self, *args)
    def SetViewVertex(self, *args): return _Freestyle.SVertex_SetViewVertex(self, *args)
    def AddFEdge(self, *args): return _Freestyle.SVertex_AddFEdge(self, *args)
    def Replace(self, *args): return _Freestyle.SVertex_Replace(self, *args)
    def getColorID(self): return _Freestyle.SVertex_getColorID(self)
    def SetSourceEdge(self, *args): return _Freestyle.SVertex_SetSourceEdge(self, *args)
    def GetSourceEdge(self): return _Freestyle.SVertex_GetSourceEdge(self)
    def SetSourceVertex(self, *args): return _Freestyle.SVertex_SetSourceVertex(self, *args)
    def GetSourceVertex(self): return _Freestyle.SVertex_GetSourceVertex(self)
    def fedge(self): return _Freestyle.SVertex_fedge(self)
    def point2d(self): return _Freestyle.SVertex_point2d(self)
    def point3d(self): return _Freestyle.SVertex_point3d(self)
    def normal(self): return _Freestyle.SVertex_normal(self)
    def shape_id(self): return _Freestyle.SVertex_shape_id(self)
    def shape(self, *args): return _Freestyle.SVertex_shape(self, *args)
    def shape_importance(self): return _Freestyle.SVertex_shape_importance(self)
    def qi(self): return _Freestyle.SVertex_qi(self)
    def occluders_begin(self): return _Freestyle.SVertex_occluders_begin(self)
    def occluders_end(self): return _Freestyle.SVertex_occluders_end(self)
    def occluders_empty(self): return _Freestyle.SVertex_occluders_empty(self)
    def occluders_size(self): return _Freestyle.SVertex_occluders_size(self)
    def occludee(self): return _Freestyle.SVertex_occludee(self)
    def occluded_shape(self): return _Freestyle.SVertex_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.SVertex_occludee_empty(self)
    def z_discontinuity(self): return _Freestyle.SVertex_z_discontinuity(self)
    def POProjected(self): return _Freestyle.SVertex_POProjected(self)
    def SetPOProjected(self): return _Freestyle.SVertex_SetPOProjected(self)
SVertex_swigregister = _Freestyle.SVertex_swigregister
SVertex_swigregister(SVertex)

class FEdge(Interface1D):
    __swig_setmethods__ = {}
    for _s in [Interface1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdge, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.FEdge_getExactTypeName(self)
    def getLength2D(self): return _Freestyle.FEdge_getLength2D(self)
    def getId(self): return _Freestyle.FEdge_getId(self)
    __swig_setmethods__["userdata"] = _Freestyle.FEdge_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.FEdge_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.FEdge_userdata_get, _Freestyle.FEdge_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_FEdge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FEdge
    __del__ = lambda self : None;
    def dupplicate(self): return _Freestyle.FEdge_dupplicate(self)
    def vertexA(self): return _Freestyle.FEdge_vertexA(self)
    def vertexB(self): return _Freestyle.FEdge_vertexB(self)
    def getNature(self): return _Freestyle.FEdge_getNature(self)
    def nextEdge(self): return _Freestyle.FEdge_nextEdge(self)
    def previousEdge(self): return _Freestyle.FEdge_previousEdge(self)
    def invisibility(self): return _Freestyle.FEdge_invisibility(self)
    def viewedge(self): return _Freestyle.FEdge_viewedge(self)
    def center3d(self): return _Freestyle.FEdge_center3d(self)
    def center2d(self): return _Freestyle.FEdge_center2d(self)
    def aFace(self): return _Freestyle.FEdge_aFace(self)
    def getOccludeeIntersection(self): return _Freestyle.FEdge_getOccludeeIntersection(self)
    def getOccludeeEmpty(self): return _Freestyle.FEdge_getOccludeeEmpty(self)
    def isSmooth(self): return _Freestyle.FEdge_isSmooth(self)
    def visSource(self): return _Freestyle.FEdge_visSource(self)
    def SetVertexA(self, *args): return _Freestyle.FEdge_SetVertexA(self, *args)
    def SetVertexB(self, *args): return _Freestyle.FEdge_SetVertexB(self, *args)
    def SetId(self, *args): return _Freestyle.FEdge_SetId(self, *args)
    def SetNextEdge(self, *args): return _Freestyle.FEdge_SetNextEdge(self, *args)
    def SetPreviousEdge(self, *args): return _Freestyle.FEdge_SetPreviousEdge(self, *args)
    def SetNature(self, *args): return _Freestyle.FEdge_SetNature(self, *args)
    def SetViewEdge(self, *args): return _Freestyle.FEdge_SetViewEdge(self, *args)
    def SetaFace(self, *args): return _Freestyle.FEdge_SetaFace(self, *args)
    def SetOccludeeIntersection(self, *args): return _Freestyle.FEdge_SetOccludeeIntersection(self, *args)
    def SetOccludeeEmpty(self, *args): return _Freestyle.FEdge_SetOccludeeEmpty(self, *args)
    def SetSmooth(self, *args): return _Freestyle.FEdge_SetSmooth(self, *args)
    def SetVisSource(self, *args): return _Freestyle.FEdge_SetVisSource(self, *args)
    __swig_getmethods__["CommonVertex"] = lambda x: _Freestyle.FEdge_CommonVertex
    if _newclass:CommonVertex = staticmethod(_Freestyle.FEdge_CommonVertex)
    def min2d(self): return _Freestyle.FEdge_min2d(self)
    def max2d(self): return _Freestyle.FEdge_max2d(self)
    def shape_id(self): return _Freestyle.FEdge_shape_id(self)
    def shape(self, *args): return _Freestyle.FEdge_shape(self, *args)
    def shape_importance(self): return _Freestyle.FEdge_shape_importance(self)
    def qi(self): return _Freestyle.FEdge_qi(self)
    def occluders_begin(self): return _Freestyle.FEdge_occluders_begin(self)
    def occluders_end(self): return _Freestyle.FEdge_occluders_end(self)
    def occluders_empty(self): return _Freestyle.FEdge_occluders_empty(self)
    def occluders_size(self): return _Freestyle.FEdge_occluders_size(self)
    def occludee(self): return _Freestyle.FEdge_occludee(self)
    def occluded_shape(self): return _Freestyle.FEdge_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.FEdge_occludee_empty(self)
    def z_discontinuity(self): return _Freestyle.FEdge_z_discontinuity(self)
    def viewedge_nature(self): return _Freestyle.FEdge_viewedge_nature(self)
    def orientation2d(self): return _Freestyle.FEdge_orientation2d(self)
    def orientation3d(self): return _Freestyle.FEdge_orientation3d(self)
    def verticesBegin(self): return _Freestyle.FEdge_verticesBegin(self)
    def verticesEnd(self): return _Freestyle.FEdge_verticesEnd(self)
    def pointsBegin(self, t=0.): return _Freestyle.FEdge_pointsBegin(self, t)
    def pointsEnd(self, t=0.): return _Freestyle.FEdge_pointsEnd(self, t)
    def getFace1(self): return _Freestyle.FEdge_getFace1(self)
    def getFace2(self): return _Freestyle.FEdge_getFace2(self)
    def intersectParametric(self, *args): return _Freestyle.FEdge_intersectParametric(self, *args)
FEdge_swigregister = _Freestyle.FEdge_swigregister
FEdge_swigregister(FEdge)

def FEdge_CommonVertex(*args):
  return _Freestyle.FEdge_CommonVertex(*args)
FEdge_CommonVertex = _Freestyle.FEdge_CommonVertex

class FEdgeSVertexIterator(Interface0DIteratorNested):
    __swig_setmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgeSVertexIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgeSVertexIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgeSVertexIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def getExactTypeName(self): return _Freestyle.FEdgeSVertexIterator_getExactTypeName(self)
    def getObject(self): return _Freestyle.FEdgeSVertexIterator_getObject(self)
    def __deref__(self): return _Freestyle.FEdgeSVertexIterator___deref__(self)
    def increment(self): return _Freestyle.FEdgeSVertexIterator_increment(self)
    def decrement(self): return _Freestyle.FEdgeSVertexIterator_decrement(self)
    def isBegin(self): return _Freestyle.FEdgeSVertexIterator_isBegin(self)
    def isEnd(self): return _Freestyle.FEdgeSVertexIterator_isEnd(self)
    def __eq__(self, *args): return _Freestyle.FEdgeSVertexIterator___eq__(self, *args)
    def t(self): return _Freestyle.FEdgeSVertexIterator_t(self)
    def u(self): return _Freestyle.FEdgeSVertexIterator_u(self)
    def copy(self): return _Freestyle.FEdgeSVertexIterator_copy(self)
    __swig_destroy__ = _Freestyle.delete_FEdgeSVertexIterator
    __del__ = lambda self : None;
    def getX(self): return _Freestyle.FEdgeSVertexIterator_getX(self)
    def getY(self): return _Freestyle.FEdgeSVertexIterator_getY(self)
    def getZ(self): return _Freestyle.FEdgeSVertexIterator_getZ(self)
    def getPoint3D(self): return _Freestyle.FEdgeSVertexIterator_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.FEdgeSVertexIterator_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.FEdgeSVertexIterator_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.FEdgeSVertexIterator_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.FEdgeSVertexIterator_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.FEdgeSVertexIterator_getFEdge(self, *args)
    def getId(self): return _Freestyle.FEdgeSVertexIterator_getId(self)
    def getNature(self): return _Freestyle.FEdgeSVertexIterator_getNature(self)
    def castToSVertex(self): return _Freestyle.FEdgeSVertexIterator_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.FEdgeSVertexIterator_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.FEdgeSVertexIterator_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.FEdgeSVertexIterator_castToTVertex(self)
    __swig_setmethods__["userdata"] = _Freestyle.FEdgeSVertexIterator_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.FEdgeSVertexIterator_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.FEdgeSVertexIterator_userdata_get, _Freestyle.FEdgeSVertexIterator_userdata_set)
    def dupplicate(self): return _Freestyle.FEdgeSVertexIterator_dupplicate(self)
    def point3D(self): return _Freestyle.FEdgeSVertexIterator_point3D(self)
    def point2D(self): return _Freestyle.FEdgeSVertexIterator_point2D(self)
    def normals(self): return _Freestyle.FEdgeSVertexIterator_normals(self)
    def normalsSize(self): return _Freestyle.FEdgeSVertexIterator_normalsSize(self)
    def fedges(self): return _Freestyle.FEdgeSVertexIterator_fedges(self)
    def fedges_begin(self): return _Freestyle.FEdgeSVertexIterator_fedges_begin(self)
    def fedges_end(self): return _Freestyle.FEdgeSVertexIterator_fedges_end(self)
    def shape(self, *args): return _Freestyle.FEdgeSVertexIterator_shape(self, *args)
    def z(self): return _Freestyle.FEdgeSVertexIterator_z(self)
    def viewvertex(self): return _Freestyle.FEdgeSVertexIterator_viewvertex(self)
    def SetPoint3D(self, *args): return _Freestyle.FEdgeSVertexIterator_SetPoint3D(self, *args)
    def SetPoint2D(self, *args): return _Freestyle.FEdgeSVertexIterator_SetPoint2D(self, *args)
    def AddNormal(self, *args): return _Freestyle.FEdgeSVertexIterator_AddNormal(self, *args)
    def setCurvatureInfo(self, *args): return _Freestyle.FEdgeSVertexIterator_setCurvatureInfo(self, *args)
    def getCurvatureInfo(self): return _Freestyle.FEdgeSVertexIterator_getCurvatureInfo(self)
    def GetIsophoteDistance(self, *args): return _Freestyle.FEdgeSVertexIterator_GetIsophoteDistance(self, *args)
    def ImageSpaceNormal(self): return _Freestyle.FEdgeSVertexIterator_ImageSpaceNormal(self)
    def setCurvatureFredo(self, *args): return _Freestyle.FEdgeSVertexIterator_setCurvatureFredo(self, *args)
    def setDirectionFredo(self, *args): return _Freestyle.FEdgeSVertexIterator_setDirectionFredo(self, *args)
    def curvatureFredo(self): return _Freestyle.FEdgeSVertexIterator_curvatureFredo(self)
    def directionFredo(self): return _Freestyle.FEdgeSVertexIterator_directionFredo(self)
    def SetId(self, *args): return _Freestyle.FEdgeSVertexIterator_SetId(self, *args)
    def SetFEdges(self, *args): return _Freestyle.FEdgeSVertexIterator_SetFEdges(self, *args)
    def SetShape(self, *args): return _Freestyle.FEdgeSVertexIterator_SetShape(self, *args)
    def SetViewVertex(self, *args): return _Freestyle.FEdgeSVertexIterator_SetViewVertex(self, *args)
    def AddFEdge(self, *args): return _Freestyle.FEdgeSVertexIterator_AddFEdge(self, *args)
    def Replace(self, *args): return _Freestyle.FEdgeSVertexIterator_Replace(self, *args)
    def getColorID(self): return _Freestyle.FEdgeSVertexIterator_getColorID(self)
    def SetSourceEdge(self, *args): return _Freestyle.FEdgeSVertexIterator_SetSourceEdge(self, *args)
    def GetSourceEdge(self): return _Freestyle.FEdgeSVertexIterator_GetSourceEdge(self)
    def SetSourceVertex(self, *args): return _Freestyle.FEdgeSVertexIterator_SetSourceVertex(self, *args)
    def GetSourceVertex(self): return _Freestyle.FEdgeSVertexIterator_GetSourceVertex(self)
    def fedge(self): return _Freestyle.FEdgeSVertexIterator_fedge(self)
    def point2d(self): return _Freestyle.FEdgeSVertexIterator_point2d(self)
    def point3d(self): return _Freestyle.FEdgeSVertexIterator_point3d(self)
    def normal(self): return _Freestyle.FEdgeSVertexIterator_normal(self)
    def shape_id(self): return _Freestyle.FEdgeSVertexIterator_shape_id(self)
    def shape_importance(self): return _Freestyle.FEdgeSVertexIterator_shape_importance(self)
    def qi(self): return _Freestyle.FEdgeSVertexIterator_qi(self)
    def occluders_begin(self): return _Freestyle.FEdgeSVertexIterator_occluders_begin(self)
    def occluders_end(self): return _Freestyle.FEdgeSVertexIterator_occluders_end(self)
    def occluders_empty(self): return _Freestyle.FEdgeSVertexIterator_occluders_empty(self)
    def occluders_size(self): return _Freestyle.FEdgeSVertexIterator_occluders_size(self)
    def occludee(self): return _Freestyle.FEdgeSVertexIterator_occludee(self)
    def occluded_shape(self): return _Freestyle.FEdgeSVertexIterator_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.FEdgeSVertexIterator_occludee_empty(self)
    def z_discontinuity(self): return _Freestyle.FEdgeSVertexIterator_z_discontinuity(self)
    def POProjected(self): return _Freestyle.FEdgeSVertexIterator_POProjected(self)
    def SetPOProjected(self): return _Freestyle.FEdgeSVertexIterator_SetPOProjected(self)
FEdgeSVertexIterator_swigregister = _Freestyle.FEdgeSVertexIterator_swigregister
FEdgeSVertexIterator_swigregister(FEdgeSVertexIterator)

class FEdgeSharp(FEdge):
    __swig_setmethods__ = {}
    for _s in [FEdge]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgeSharp, name, value)
    __swig_getmethods__ = {}
    for _s in [FEdge]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgeSharp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgeSharp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FEdgeSharp
    __del__ = lambda self : None;
    def dupplicate(self): return _Freestyle.FEdgeSharp_dupplicate(self)
    def normalA(self): return _Freestyle.FEdgeSharp_normalA(self)
    def normalB(self): return _Freestyle.FEdgeSharp_normalB(self)
    def aMaterialIndex(self): return _Freestyle.FEdgeSharp_aMaterialIndex(self)
    def aMaterial(self): return _Freestyle.FEdgeSharp_aMaterial(self)
    def bMaterialIndex(self): return _Freestyle.FEdgeSharp_bMaterialIndex(self)
    def bMaterial(self): return _Freestyle.FEdgeSharp_bMaterial(self)
    def edge(self): return _Freestyle.FEdgeSharp_edge(self)
    def SetNormalA(self, *args): return _Freestyle.FEdgeSharp_SetNormalA(self, *args)
    def SetNormalB(self, *args): return _Freestyle.FEdgeSharp_SetNormalB(self, *args)
    def SetaMaterialIndex(self, *args): return _Freestyle.FEdgeSharp_SetaMaterialIndex(self, *args)
    def SetbMaterialIndex(self, *args): return _Freestyle.FEdgeSharp_SetbMaterialIndex(self, *args)
    def SetEdge(self, *args): return _Freestyle.FEdgeSharp_SetEdge(self, *args)
    def getFace1(self): return _Freestyle.FEdgeSharp_getFace1(self)
    def getFace2(self): return _Freestyle.FEdgeSharp_getFace2(self)
FEdgeSharp_swigregister = _Freestyle.FEdgeSharp_swigregister
FEdgeSharp_swigregister(FEdgeSharp)

class FEdgeSmooth(FEdge):
    __swig_setmethods__ = {}
    for _s in [FEdge]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgeSmooth, name, value)
    __swig_getmethods__ = {}
    for _s in [FEdge]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgeSmooth, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgeSmooth(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FEdgeSmooth
    __del__ = lambda self : None;
    def dupplicate(self): return _Freestyle.FEdgeSmooth_dupplicate(self)
    def face(self): return _Freestyle.FEdgeSmooth_face(self)
    def getFace1(self): return _Freestyle.FEdgeSmooth_getFace1(self)
    def getFace2(self): return _Freestyle.FEdgeSmooth_getFace2(self)
    def normal(self): return _Freestyle.FEdgeSmooth_normal(self)
    def materialIndex(self): return _Freestyle.FEdgeSmooth_materialIndex(self)
    def material(self): return _Freestyle.FEdgeSmooth_material(self)
    def SetFace(self, *args): return _Freestyle.FEdgeSmooth_SetFace(self, *args)
    def SetNormal(self, *args): return _Freestyle.FEdgeSmooth_SetNormal(self, *args)
    def SetMaterialIndex(self, *args): return _Freestyle.FEdgeSmooth_SetMaterialIndex(self, *args)
FEdgeSmooth_swigregister = _Freestyle.FEdgeSmooth_swigregister
FEdgeSmooth_swigregister(FEdgeSmooth)

class FEdgeIntersection(FEdgeSmooth):
    __swig_setmethods__ = {}
    for _s in [FEdgeSmooth]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgeIntersection, name, value)
    __swig_getmethods__ = {}
    for _s in [FEdgeSmooth]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgeIntersection, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgeIntersection(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FEdgeIntersection
    __del__ = lambda self : None;
    def dupplicate(self): return _Freestyle.FEdgeIntersection_dupplicate(self)
    def getFace1(self): return _Freestyle.FEdgeIntersection_getFace1(self)
    def getFace2(self): return _Freestyle.FEdgeIntersection_getFace2(self)
    def SetFaces(self, *args): return _Freestyle.FEdgeIntersection_SetFaces(self, *args)
FEdgeIntersection_swigregister = _Freestyle.FEdgeIntersection_swigregister
FEdgeIntersection_swigregister(FEdgeIntersection)

class SShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userdata"] = _Freestyle.SShape_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.SShape_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.SShape_userdata_get, _Freestyle.SShape_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_SShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def dupplicate(self): return _Freestyle.SShape_dupplicate(self)
    __swig_destroy__ = _Freestyle.delete_SShape
    __del__ = lambda self : None;
    def AddEdge(self, *args): return _Freestyle.SShape_AddEdge(self, *args)
    def AddNewVertex(self, *args): return _Freestyle.SShape_AddNewVertex(self, *args)
    def AddChain(self, *args): return _Freestyle.SShape_AddChain(self, *args)
    def CreateSVertex(self, *args): return _Freestyle.SShape_CreateSVertex(self, *args)
    def SplitEdge(self, *args): return _Freestyle.SShape_SplitEdge(self, *args)
    def SplitEdgeIn2(self, *args): return _Freestyle.SShape_SplitEdgeIn2(self, *args)
    def SetBBox(self, *args): return _Freestyle.SShape_SetBBox(self, *args)
    def ComputeBBox(self): return _Freestyle.SShape_ComputeBBox(self)
    def RemoveEdgeFromChain(self, *args): return _Freestyle.SShape_RemoveEdgeFromChain(self, *args)
    def RemoveEdge(self, *args): return _Freestyle.SShape_RemoveEdge(self, *args)
    def GetVertexList(self): return _Freestyle.SShape_GetVertexList(self)
    def GetEdgeList(self): return _Freestyle.SShape_GetEdgeList(self)
    def GetChains(self): return _Freestyle.SShape_GetChains(self)
    def bbox(self): return _Freestyle.SShape_bbox(self)
    def material(self, *args): return _Freestyle.SShape_material(self, *args)
    def materials(self): return _Freestyle.SShape_materials(self)
    def viewShape(self): return _Freestyle.SShape_viewShape(self)
    def importance(self): return _Freestyle.SShape_importance(self)
    def getId(self): return _Freestyle.SShape_getId(self)
    def SetId(self, *args): return _Freestyle.SShape_SetId(self, *args)
    def SetMaterials(self, *args): return _Freestyle.SShape_SetMaterials(self, *args)
    def SetViewShape(self, *args): return _Freestyle.SShape_SetViewShape(self, *args)
    def SetImportance(self, *args): return _Freestyle.SShape_SetImportance(self, *args)
    def RemoveVertex(self, *args): return _Freestyle.SShape_RemoveVertex(self, *args)
SShape_swigregister = _Freestyle.SShape_swigregister
SShape_swigregister(SShape)

class ViewShapesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewShapesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewShapesContainer, name)
    __repr__ = _swig_repr
    def iterator(self): return _Freestyle.ViewShapesContainer_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Freestyle.ViewShapesContainer___nonzero__(self)
    def __bool__(self): return _Freestyle.ViewShapesContainer___bool__(self)
    def __len__(self): return _Freestyle.ViewShapesContainer___len__(self)
    def pop(self): return _Freestyle.ViewShapesContainer_pop(self)
    def __getslice__(self, *args): return _Freestyle.ViewShapesContainer___getslice__(self, *args)
    def __setslice__(self, *args): return _Freestyle.ViewShapesContainer___setslice__(self, *args)
    def __delslice__(self, *args): return _Freestyle.ViewShapesContainer___delslice__(self, *args)
    def __delitem__(self, *args): return _Freestyle.ViewShapesContainer___delitem__(self, *args)
    def __getitem__(self, *args): return _Freestyle.ViewShapesContainer___getitem__(self, *args)
    def __setitem__(self, *args): return _Freestyle.ViewShapesContainer___setitem__(self, *args)
    def append(self, *args): return _Freestyle.ViewShapesContainer_append(self, *args)
    def empty(self): return _Freestyle.ViewShapesContainer_empty(self)
    def size(self): return _Freestyle.ViewShapesContainer_size(self)
    def clear(self): return _Freestyle.ViewShapesContainer_clear(self)
    def swap(self, *args): return _Freestyle.ViewShapesContainer_swap(self, *args)
    def get_allocator(self): return _Freestyle.ViewShapesContainer_get_allocator(self)
    def begin(self): return _Freestyle.ViewShapesContainer_begin(self)
    def end(self): return _Freestyle.ViewShapesContainer_end(self)
    def rbegin(self): return _Freestyle.ViewShapesContainer_rbegin(self)
    def rend(self): return _Freestyle.ViewShapesContainer_rend(self)
    def pop_back(self): return _Freestyle.ViewShapesContainer_pop_back(self)
    def erase(self, *args): return _Freestyle.ViewShapesContainer_erase(self, *args)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewShapesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Freestyle.ViewShapesContainer_push_back(self, *args)
    def front(self): return _Freestyle.ViewShapesContainer_front(self)
    def back(self): return _Freestyle.ViewShapesContainer_back(self)
    def assign(self, *args): return _Freestyle.ViewShapesContainer_assign(self, *args)
    def resize(self, *args): return _Freestyle.ViewShapesContainer_resize(self, *args)
    def insert(self, *args): return _Freestyle.ViewShapesContainer_insert(self, *args)
    def reserve(self, *args): return _Freestyle.ViewShapesContainer_reserve(self, *args)
    def capacity(self): return _Freestyle.ViewShapesContainer_capacity(self)
    __swig_destroy__ = _Freestyle.delete_ViewShapesContainer
    __del__ = lambda self : None;
ViewShapesContainer_swigregister = _Freestyle.ViewShapesContainer_swigregister
ViewShapesContainer_swigregister(ViewShapesContainer)

class ViewEdgesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewEdgesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewEdgesContainer, name)
    __repr__ = _swig_repr
    def iterator(self): return _Freestyle.ViewEdgesContainer_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Freestyle.ViewEdgesContainer___nonzero__(self)
    def __bool__(self): return _Freestyle.ViewEdgesContainer___bool__(self)
    def __len__(self): return _Freestyle.ViewEdgesContainer___len__(self)
    def pop(self): return _Freestyle.ViewEdgesContainer_pop(self)
    def __getslice__(self, *args): return _Freestyle.ViewEdgesContainer___getslice__(self, *args)
    def __setslice__(self, *args): return _Freestyle.ViewEdgesContainer___setslice__(self, *args)
    def __delslice__(self, *args): return _Freestyle.ViewEdgesContainer___delslice__(self, *args)
    def __delitem__(self, *args): return _Freestyle.ViewEdgesContainer___delitem__(self, *args)
    def __getitem__(self, *args): return _Freestyle.ViewEdgesContainer___getitem__(self, *args)
    def __setitem__(self, *args): return _Freestyle.ViewEdgesContainer___setitem__(self, *args)
    def append(self, *args): return _Freestyle.ViewEdgesContainer_append(self, *args)
    def empty(self): return _Freestyle.ViewEdgesContainer_empty(self)
    def size(self): return _Freestyle.ViewEdgesContainer_size(self)
    def clear(self): return _Freestyle.ViewEdgesContainer_clear(self)
    def swap(self, *args): return _Freestyle.ViewEdgesContainer_swap(self, *args)
    def get_allocator(self): return _Freestyle.ViewEdgesContainer_get_allocator(self)
    def begin(self): return _Freestyle.ViewEdgesContainer_begin(self)
    def end(self): return _Freestyle.ViewEdgesContainer_end(self)
    def rbegin(self): return _Freestyle.ViewEdgesContainer_rbegin(self)
    def rend(self): return _Freestyle.ViewEdgesContainer_rend(self)
    def pop_back(self): return _Freestyle.ViewEdgesContainer_pop_back(self)
    def erase(self, *args): return _Freestyle.ViewEdgesContainer_erase(self, *args)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewEdgesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Freestyle.ViewEdgesContainer_push_back(self, *args)
    def front(self): return _Freestyle.ViewEdgesContainer_front(self)
    def back(self): return _Freestyle.ViewEdgesContainer_back(self)
    def assign(self, *args): return _Freestyle.ViewEdgesContainer_assign(self, *args)
    def resize(self, *args): return _Freestyle.ViewEdgesContainer_resize(self, *args)
    def insert(self, *args): return _Freestyle.ViewEdgesContainer_insert(self, *args)
    def reserve(self, *args): return _Freestyle.ViewEdgesContainer_reserve(self, *args)
    def capacity(self): return _Freestyle.ViewEdgesContainer_capacity(self)
    __swig_destroy__ = _Freestyle.delete_ViewEdgesContainer
    __del__ = lambda self : None;
ViewEdgesContainer_swigregister = _Freestyle.ViewEdgesContainer_swigregister
ViewEdgesContainer_swigregister(ViewEdgesContainer)

class FEdgesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FEdgesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FEdgesContainer, name)
    __repr__ = _swig_repr
    def iterator(self): return _Freestyle.FEdgesContainer_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Freestyle.FEdgesContainer___nonzero__(self)
    def __bool__(self): return _Freestyle.FEdgesContainer___bool__(self)
    def __len__(self): return _Freestyle.FEdgesContainer___len__(self)
    def pop(self): return _Freestyle.FEdgesContainer_pop(self)
    def __getslice__(self, *args): return _Freestyle.FEdgesContainer___getslice__(self, *args)
    def __setslice__(self, *args): return _Freestyle.FEdgesContainer___setslice__(self, *args)
    def __delslice__(self, *args): return _Freestyle.FEdgesContainer___delslice__(self, *args)
    def __delitem__(self, *args): return _Freestyle.FEdgesContainer___delitem__(self, *args)
    def __getitem__(self, *args): return _Freestyle.FEdgesContainer___getitem__(self, *args)
    def __setitem__(self, *args): return _Freestyle.FEdgesContainer___setitem__(self, *args)
    def append(self, *args): return _Freestyle.FEdgesContainer_append(self, *args)
    def empty(self): return _Freestyle.FEdgesContainer_empty(self)
    def size(self): return _Freestyle.FEdgesContainer_size(self)
    def clear(self): return _Freestyle.FEdgesContainer_clear(self)
    def swap(self, *args): return _Freestyle.FEdgesContainer_swap(self, *args)
    def get_allocator(self): return _Freestyle.FEdgesContainer_get_allocator(self)
    def begin(self): return _Freestyle.FEdgesContainer_begin(self)
    def end(self): return _Freestyle.FEdgesContainer_end(self)
    def rbegin(self): return _Freestyle.FEdgesContainer_rbegin(self)
    def rend(self): return _Freestyle.FEdgesContainer_rend(self)
    def pop_back(self): return _Freestyle.FEdgesContainer_pop_back(self)
    def erase(self, *args): return _Freestyle.FEdgesContainer_erase(self, *args)
    def __init__(self, *args): 
        this = _Freestyle.new_FEdgesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Freestyle.FEdgesContainer_push_back(self, *args)
    def front(self): return _Freestyle.FEdgesContainer_front(self)
    def back(self): return _Freestyle.FEdgesContainer_back(self)
    def assign(self, *args): return _Freestyle.FEdgesContainer_assign(self, *args)
    def resize(self, *args): return _Freestyle.FEdgesContainer_resize(self, *args)
    def insert(self, *args): return _Freestyle.FEdgesContainer_insert(self, *args)
    def reserve(self, *args): return _Freestyle.FEdgesContainer_reserve(self, *args)
    def capacity(self): return _Freestyle.FEdgesContainer_capacity(self)
    __swig_destroy__ = _Freestyle.delete_FEdgesContainer
    __del__ = lambda self : None;
FEdgesContainer_swigregister = _Freestyle.FEdgesContainer_swigregister
FEdgesContainer_swigregister(FEdgesContainer)

class ViewVerticesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewVerticesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewVerticesContainer, name)
    __repr__ = _swig_repr
    def iterator(self): return _Freestyle.ViewVerticesContainer_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Freestyle.ViewVerticesContainer___nonzero__(self)
    def __bool__(self): return _Freestyle.ViewVerticesContainer___bool__(self)
    def __len__(self): return _Freestyle.ViewVerticesContainer___len__(self)
    def pop(self): return _Freestyle.ViewVerticesContainer_pop(self)
    def __getslice__(self, *args): return _Freestyle.ViewVerticesContainer___getslice__(self, *args)
    def __setslice__(self, *args): return _Freestyle.ViewVerticesContainer___setslice__(self, *args)
    def __delslice__(self, *args): return _Freestyle.ViewVerticesContainer___delslice__(self, *args)
    def __delitem__(self, *args): return _Freestyle.ViewVerticesContainer___delitem__(self, *args)
    def __getitem__(self, *args): return _Freestyle.ViewVerticesContainer___getitem__(self, *args)
    def __setitem__(self, *args): return _Freestyle.ViewVerticesContainer___setitem__(self, *args)
    def append(self, *args): return _Freestyle.ViewVerticesContainer_append(self, *args)
    def empty(self): return _Freestyle.ViewVerticesContainer_empty(self)
    def size(self): return _Freestyle.ViewVerticesContainer_size(self)
    def clear(self): return _Freestyle.ViewVerticesContainer_clear(self)
    def swap(self, *args): return _Freestyle.ViewVerticesContainer_swap(self, *args)
    def get_allocator(self): return _Freestyle.ViewVerticesContainer_get_allocator(self)
    def begin(self): return _Freestyle.ViewVerticesContainer_begin(self)
    def end(self): return _Freestyle.ViewVerticesContainer_end(self)
    def rbegin(self): return _Freestyle.ViewVerticesContainer_rbegin(self)
    def rend(self): return _Freestyle.ViewVerticesContainer_rend(self)
    def pop_back(self): return _Freestyle.ViewVerticesContainer_pop_back(self)
    def erase(self, *args): return _Freestyle.ViewVerticesContainer_erase(self, *args)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewVerticesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Freestyle.ViewVerticesContainer_push_back(self, *args)
    def front(self): return _Freestyle.ViewVerticesContainer_front(self)
    def back(self): return _Freestyle.ViewVerticesContainer_back(self)
    def assign(self, *args): return _Freestyle.ViewVerticesContainer_assign(self, *args)
    def resize(self, *args): return _Freestyle.ViewVerticesContainer_resize(self, *args)
    def insert(self, *args): return _Freestyle.ViewVerticesContainer_insert(self, *args)
    def reserve(self, *args): return _Freestyle.ViewVerticesContainer_reserve(self, *args)
    def capacity(self): return _Freestyle.ViewVerticesContainer_capacity(self)
    __swig_destroy__ = _Freestyle.delete_ViewVerticesContainer
    __del__ = lambda self : None;
ViewVerticesContainer_swigregister = _Freestyle.ViewVerticesContainer_swigregister
ViewVerticesContainer_swigregister(ViewVerticesContainer)

class SVerticesContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SVerticesContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SVerticesContainer, name)
    __repr__ = _swig_repr
    def iterator(self): return _Freestyle.SVerticesContainer_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Freestyle.SVerticesContainer___nonzero__(self)
    def __bool__(self): return _Freestyle.SVerticesContainer___bool__(self)
    def __len__(self): return _Freestyle.SVerticesContainer___len__(self)
    def pop(self): return _Freestyle.SVerticesContainer_pop(self)
    def __getslice__(self, *args): return _Freestyle.SVerticesContainer___getslice__(self, *args)
    def __setslice__(self, *args): return _Freestyle.SVerticesContainer___setslice__(self, *args)
    def __delslice__(self, *args): return _Freestyle.SVerticesContainer___delslice__(self, *args)
    def __delitem__(self, *args): return _Freestyle.SVerticesContainer___delitem__(self, *args)
    def __getitem__(self, *args): return _Freestyle.SVerticesContainer___getitem__(self, *args)
    def __setitem__(self, *args): return _Freestyle.SVerticesContainer___setitem__(self, *args)
    def append(self, *args): return _Freestyle.SVerticesContainer_append(self, *args)
    def empty(self): return _Freestyle.SVerticesContainer_empty(self)
    def size(self): return _Freestyle.SVerticesContainer_size(self)
    def clear(self): return _Freestyle.SVerticesContainer_clear(self)
    def swap(self, *args): return _Freestyle.SVerticesContainer_swap(self, *args)
    def get_allocator(self): return _Freestyle.SVerticesContainer_get_allocator(self)
    def begin(self): return _Freestyle.SVerticesContainer_begin(self)
    def end(self): return _Freestyle.SVerticesContainer_end(self)
    def rbegin(self): return _Freestyle.SVerticesContainer_rbegin(self)
    def rend(self): return _Freestyle.SVerticesContainer_rend(self)
    def pop_back(self): return _Freestyle.SVerticesContainer_pop_back(self)
    def erase(self, *args): return _Freestyle.SVerticesContainer_erase(self, *args)
    def __init__(self, *args): 
        this = _Freestyle.new_SVerticesContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Freestyle.SVerticesContainer_push_back(self, *args)
    def front(self): return _Freestyle.SVerticesContainer_front(self)
    def back(self): return _Freestyle.SVerticesContainer_back(self)
    def assign(self, *args): return _Freestyle.SVerticesContainer_assign(self, *args)
    def resize(self, *args): return _Freestyle.SVerticesContainer_resize(self, *args)
    def insert(self, *args): return _Freestyle.SVerticesContainer_insert(self, *args)
    def reserve(self, *args): return _Freestyle.SVerticesContainer_reserve(self, *args)
    def capacity(self): return _Freestyle.SVerticesContainer_capacity(self)
    __swig_destroy__ = _Freestyle.delete_SVerticesContainer
    __del__ = lambda self : None;
SVerticesContainer_swigregister = _Freestyle.SVerticesContainer_swigregister
SVerticesContainer_swigregister(SVerticesContainer)

class DebugPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DebugPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DebugPoint, name)
    __repr__ = _swig_repr
    ERROR = _Freestyle.DebugPoint_ERROR
    CUSP = _Freestyle.DebugPoint_CUSP
    RAY_TRACE_VISIBLE = _Freestyle.DebugPoint_RAY_TRACE_VISIBLE
    RAY_TRACE_INVISIBLE = _Freestyle.DebugPoint_RAY_TRACE_INVISIBLE
    INVISIBLE_BACK_FACE = _Freestyle.DebugPoint_INVISIBLE_BACK_FACE
    INVISIBLE_ONE_RING_OVERLAP = _Freestyle.DebugPoint_INVISIBLE_ONE_RING_OVERLAP
    INTERSECTION_2D = _Freestyle.DebugPoint_INTERSECTION_2D
    INTERSECTION_2D_ON_SURFACE = _Freestyle.DebugPoint_INTERSECTION_2D_ON_SURFACE
    PO_CROSSING_INSIDE_TRI = _Freestyle.DebugPoint_PO_CROSSING_INSIDE_TRI
    PO_CROSSING_ON_MESH_EDGE = _Freestyle.DebugPoint_PO_CROSSING_ON_MESH_EDGE
    SI_SIL_CONNECTION = _Freestyle.DebugPoint_SI_SIL_CONNECTION
    FRONT_FACING_VERTEX = _Freestyle.DebugPoint_FRONT_FACING_VERTEX
    BACK_FACING_VERTEX = _Freestyle.DebugPoint_BACK_FACING_VERTEX
    CONTOUR_VERTEX = _Freestyle.DebugPoint_CONTOUR_VERTEX
    ISOPHOTE = _Freestyle.DebugPoint_ISOPHOTE
    __swig_setmethods__["pointType"] = _Freestyle.DebugPoint_pointType_set
    __swig_getmethods__["pointType"] = _Freestyle.DebugPoint_pointType_get
    if _newclass:pointType = _swig_property(_Freestyle.DebugPoint_pointType_get, _Freestyle.DebugPoint_pointType_set)
    __swig_setmethods__["point3D"] = _Freestyle.DebugPoint_point3D_set
    __swig_getmethods__["point3D"] = _Freestyle.DebugPoint_point3D_get
    if _newclass:point3D = _swig_property(_Freestyle.DebugPoint_point3D_get, _Freestyle.DebugPoint_point3D_set)
    __swig_setmethods__["knownInvis"] = _Freestyle.DebugPoint_knownInvis_set
    __swig_getmethods__["knownInvis"] = _Freestyle.DebugPoint_knownInvis_get
    if _newclass:knownInvis = _swig_property(_Freestyle.DebugPoint_knownInvis_get, _Freestyle.DebugPoint_knownInvis_set)
    __swig_setmethods__["sv"] = _Freestyle.DebugPoint_sv_set
    __swig_getmethods__["sv"] = _Freestyle.DebugPoint_sv_get
    if _newclass:sv = _swig_property(_Freestyle.DebugPoint_sv_get, _Freestyle.DebugPoint_sv_set)
    __swig_setmethods__["hasPair"] = _Freestyle.DebugPoint_hasPair_set
    __swig_getmethods__["hasPair"] = _Freestyle.DebugPoint_hasPair_get
    if _newclass:hasPair = _swig_property(_Freestyle.DebugPoint_hasPair_get, _Freestyle.DebugPoint_hasPair_set)
    __swig_setmethods__["pairPoint3D"] = _Freestyle.DebugPoint_pairPoint3D_set
    __swig_getmethods__["pairPoint3D"] = _Freestyle.DebugPoint_pairPoint3D_get
    if _newclass:pairPoint3D = _swig_property(_Freestyle.DebugPoint_pairPoint3D_get, _Freestyle.DebugPoint_pairPoint3D_set)
    __swig_setmethods__["pairKnownInvis"] = _Freestyle.DebugPoint_pairKnownInvis_set
    __swig_getmethods__["pairKnownInvis"] = _Freestyle.DebugPoint_pairKnownInvis_get
    if _newclass:pairKnownInvis = _swig_property(_Freestyle.DebugPoint_pairKnownInvis_get, _Freestyle.DebugPoint_pairKnownInvis_set)
    __swig_setmethods__["pairSV"] = _Freestyle.DebugPoint_pairSV_set
    __swig_getmethods__["pairSV"] = _Freestyle.DebugPoint_pairSV_get
    if _newclass:pairSV = _swig_property(_Freestyle.DebugPoint_pairSV_get, _Freestyle.DebugPoint_pairSV_set)
    __swig_setmethods__["RIFpoint"] = _Freestyle.DebugPoint_RIFpoint_set
    __swig_getmethods__["RIFpoint"] = _Freestyle.DebugPoint_RIFpoint_get
    if _newclass:RIFpoint = _swig_property(_Freestyle.DebugPoint_RIFpoint_get, _Freestyle.DebugPoint_RIFpoint_set)
    __swig_setmethods__["debugString"] = _Freestyle.DebugPoint_debugString_set
    __swig_getmethods__["debugString"] = _Freestyle.DebugPoint_debugString_get
    if _newclass:debugString = _swig_property(_Freestyle.DebugPoint_debugString_get, _Freestyle.DebugPoint_debugString_set)
    __swig_setmethods__["radialCurvature"] = _Freestyle.DebugPoint_radialCurvature_set
    __swig_getmethods__["radialCurvature"] = _Freestyle.DebugPoint_radialCurvature_get
    if _newclass:radialCurvature = _swig_property(_Freestyle.DebugPoint_radialCurvature_get, _Freestyle.DebugPoint_radialCurvature_set)
    def __init__(self): 
        this = _Freestyle.new_DebugPoint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_DebugPoint
    __del__ = lambda self : None;
DebugPoint_swigregister = _Freestyle.DebugPoint_swigregister
DebugPoint_swigregister(DebugPoint)

class ViewMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userdata"] = _Freestyle.ViewMap_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewMap_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewMap_userdata_get, _Freestyle.ViewMap_userdata_set)
    def __init__(self): 
        this = _Freestyle.new_ViewMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ViewMap
    __del__ = lambda self : None;
    def GetClosestViewEdge(self, *args): return _Freestyle.ViewMap_GetClosestViewEdge(self, *args)
    def GetClosestFEdge(self, *args): return _Freestyle.ViewMap_GetClosestFEdge(self, *args)
    __swig_getmethods__["getInstance"] = lambda x: _Freestyle.ViewMap_getInstance
    if _newclass:getInstance = staticmethod(_Freestyle.ViewMap_getInstance)
    def ViewShapes(self): return _Freestyle.ViewMap_ViewShapes(self)
    def ViewEdges(self): return _Freestyle.ViewMap_ViewEdges(self)
    def ViewVertices(self): return _Freestyle.ViewMap_ViewVertices(self)
    def FEdges(self): return _Freestyle.ViewMap_FEdges(self)
    def SVertices(self): return _Freestyle.ViewMap_SVertices(self)
    def viewedges_begin(self): return _Freestyle.ViewMap_viewedges_begin(self)
    def viewedges_end(self): return _Freestyle.ViewMap_viewedges_end(self)
    def viewedges_size(self): return _Freestyle.ViewMap_viewedges_size(self)
    def viewShape(self, *args): return _Freestyle.ViewMap_viewShape(self, *args)
    def shapeIdToIndexMap(self): return _Freestyle.ViewMap_shapeIdToIndexMap(self)
    def getScene3dBBox(self): return _Freestyle.ViewMap_getScene3dBBox(self)
    def AddViewShape(self, *args): return _Freestyle.ViewMap_AddViewShape(self, *args)
    def AddViewEdge(self, *args): return _Freestyle.ViewMap_AddViewEdge(self, *args)
    def AddViewVertex(self, *args): return _Freestyle.ViewMap_AddViewVertex(self, *args)
    def AddFEdge(self, *args): return _Freestyle.ViewMap_AddFEdge(self, *args)
    def AddSVertex(self, *args): return _Freestyle.ViewMap_AddSVertex(self, *args)
    def setScene3dBBox(self, *args): return _Freestyle.ViewMap_setScene3dBBox(self, *args)
    def RemoveVertex(self, *args): return _Freestyle.ViewMap_RemoveVertex(self, *args)
    def CreateTVertex(self, *args): return _Freestyle.ViewMap_CreateTVertex(self, *args)
    def CreateNonTVertex(self, *args): return _Freestyle.ViewMap_CreateNonTVertex(self, *args)
    def InsertViewVertex(self, *args): return _Freestyle.ViewMap_InsertViewVertex(self, *args)
    def MergeTVertices(self, *args): return _Freestyle.ViewMap_MergeTVertices(self, *args)
    def MergeNonTVertices(self, *args): return _Freestyle.ViewMap_MergeNonTVertices(self, *args)
    def MergeSNonTVertices(self, *args): return _Freestyle.ViewMap_MergeSNonTVertices(self, *args)
    def MergeVertices(self, *args): return _Freestyle.ViewMap_MergeVertices(self, *args)
    def checkPointers(self, *args): return _Freestyle.ViewMap_checkPointers(self, *args)
    def render3D(self, *args): return _Freestyle.ViewMap_render3D(self, *args)
    def addDebugPoint(self, *args): return _Freestyle.ViewMap_addDebugPoint(self, *args)
    def addRIFDebugPoint(self, *args): return _Freestyle.ViewMap_addRIFDebugPoint(self, *args)
    def addCuspFace(self, *args): return _Freestyle.ViewMap_addCuspFace(self, *args)
    def setFacePOData(self, *args): return _Freestyle.ViewMap_setFacePOData(self, *args)
    def facePOData(self, *args): return _Freestyle.ViewMap_facePOData(self, *args)
    def addInconsistentTri(self, *args): return _Freestyle.ViewMap_addInconsistentTri(self, *args)
ViewMap_swigregister = _Freestyle.ViewMap_swigregister
ViewMap_swigregister(ViewMap)

def ViewMap_getInstance():
  return _Freestyle.ViewMap_getInstance()
ViewMap_getInstance = _Freestyle.ViewMap_getInstance

class ViewVertex(Interface0D):
    __swig_setmethods__ = {}
    for _s in [Interface0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewVertex, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.ViewVertex_getExactTypeName(self)
    __swig_setmethods__["userdata"] = _Freestyle.ViewVertex_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewVertex_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewVertex_userdata_get, _Freestyle.ViewVertex_userdata_set)
    __swig_destroy__ = _Freestyle.delete_ViewVertex
    __del__ = lambda self : None;
    def getNature(self): return _Freestyle.ViewVertex_getNature(self)
    def setNature(self, *args): return _Freestyle.ViewVertex_setNature(self, *args)
    def Replace(self, *args): return _Freestyle.ViewVertex_Replace(self, *args)
    def edges_begin(self, *args): return _Freestyle.ViewVertex_edges_begin(self, *args)
    def edges_end(self, *args): return _Freestyle.ViewVertex_edges_end(self, *args)
    def edges_iterator(self, *args): return _Freestyle.ViewVertex_edges_iterator(self, *args)
    def edgesBegin(self): return _Freestyle.ViewVertex_edgesBegin(self)
    def edgesEnd(self): return _Freestyle.ViewVertex_edgesEnd(self)
    def edgesIterator(self, *args): return _Freestyle.ViewVertex_edgesIterator(self, *args)
ViewVertex_swigregister = _Freestyle.ViewVertex_swigregister
ViewVertex_swigregister(ViewVertex)

class TVertex(ViewVertex):
    __swig_setmethods__ = {}
    for _s in [ViewVertex]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewVertex]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TVertex, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.TVertex_getExactTypeName(self)
    def getX(self): return _Freestyle.TVertex_getX(self)
    def getY(self): return _Freestyle.TVertex_getY(self)
    def getZ(self): return _Freestyle.TVertex_getZ(self)
    def getPoint3D(self): return _Freestyle.TVertex_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.TVertex_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.TVertex_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.TVertex_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.TVertex_getPoint2D(self)
    def getId(self): return _Freestyle.TVertex_getId(self)
    def castToViewVertex(self): return _Freestyle.TVertex_castToViewVertex(self)
    def castToTVertex(self): return _Freestyle.TVertex_castToTVertex(self)
    def __init__(self, *args): 
        this = _Freestyle.new_TVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    def frontSVertex(self): return _Freestyle.TVertex_frontSVertex(self)
    def backSVertex(self): return _Freestyle.TVertex_backSVertex(self)
    def frontEdgeA(self): return _Freestyle.TVertex_frontEdgeA(self)
    def frontEdgeB(self): return _Freestyle.TVertex_frontEdgeB(self)
    def backEdgeA(self): return _Freestyle.TVertex_backEdgeA(self)
    def backEdgeB(self): return _Freestyle.TVertex_backEdgeB(self)
    def sameFace(self): return _Freestyle.TVertex_sameFace(self)
    def SetFrontVertex(self, *args): return _Freestyle.TVertex_SetFrontVertex(self, *args)
    def SetBackSVertex(self, *args): return _Freestyle.TVertex_SetBackSVertex(self, *args)
    def SetFrontEdgeA(self, *args): return _Freestyle.TVertex_SetFrontEdgeA(self, *args)
    def SetFrontEdgeB(self, *args): return _Freestyle.TVertex_SetFrontEdgeB(self, *args)
    def SetBackEdgeA(self, *args): return _Freestyle.TVertex_SetBackEdgeA(self, *args)
    def SetBackEdgeB(self, *args): return _Freestyle.TVertex_SetBackEdgeB(self, *args)
    def SetSameFace(self, *args): return _Freestyle.TVertex_SetSameFace(self, *args)
    def SetId(self, *args): return _Freestyle.TVertex_SetId(self, *args)
    def GetSVertex(self, *args): return _Freestyle.TVertex_GetSVertex(self, *args)
    def Replace(self, *args): return _Freestyle.TVertex_Replace(self, *args)
    def mate(self, *args): return _Freestyle.TVertex_mate(self, *args)
    def edges_end(self, *args): return _Freestyle.TVertex_edges_end(self, *args)
    def edgesBegin(self): return _Freestyle.TVertex_edgesBegin(self)
    def edgesEnd(self): return _Freestyle.TVertex_edgesEnd(self)
    def edgesIterator(self, *args): return _Freestyle.TVertex_edgesIterator(self, *args)
    def recreateEdgeList(self): return _Freestyle.TVertex_recreateEdgeList(self)
    def numEdges(self): return _Freestyle.TVertex_numEdges(self)
    def getEdge(self, *args): return _Freestyle.TVertex_getEdge(self, *args)
    __swig_destroy__ = _Freestyle.delete_TVertex
    __del__ = lambda self : None;
TVertex_swigregister = _Freestyle.TVertex_swigregister
TVertex_swigregister(TVertex)

class NonTVertex(ViewVertex):
    __swig_setmethods__ = {}
    for _s in [ViewVertex]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NonTVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewVertex]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NonTVertex, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.NonTVertex_getExactTypeName(self)
    def getX(self): return _Freestyle.NonTVertex_getX(self)
    def getY(self): return _Freestyle.NonTVertex_getY(self)
    def getZ(self): return _Freestyle.NonTVertex_getZ(self)
    def getPoint3D(self): return _Freestyle.NonTVertex_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.NonTVertex_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.NonTVertex_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.NonTVertex_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.NonTVertex_getPoint2D(self)
    def getId(self): return _Freestyle.NonTVertex_getId(self)
    def castToSVertex(self): return _Freestyle.NonTVertex_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.NonTVertex_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.NonTVertex_castToNonTVertex(self)
    def __init__(self, *args): 
        this = _Freestyle.new_NonTVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_NonTVertex
    __del__ = lambda self : None;
    def svertex(self): return _Freestyle.NonTVertex_svertex(self)
    def viewedges(self): return _Freestyle.NonTVertex_viewedges(self)
    def SetSVertex(self, *args): return _Freestyle.NonTVertex_SetSVertex(self, *args)
    def SetViewEdges(self, *args): return _Freestyle.NonTVertex_SetViewEdges(self, *args)
    def AddIncomingViewEdge(self, *args): return _Freestyle.NonTVertex_AddIncomingViewEdge(self, *args)
    def AddOutgoingViewEdge(self, *args): return _Freestyle.NonTVertex_AddOutgoingViewEdge(self, *args)
    def AddViewEdge(self, *args): return _Freestyle.NonTVertex_AddViewEdge(self, *args)
    def Replace(self, *args): return _Freestyle.NonTVertex_Replace(self, *args)
    def edges_end(self, *args): return _Freestyle.NonTVertex_edges_end(self, *args)
    def edgesBegin(self): return _Freestyle.NonTVertex_edgesBegin(self)
    def edgesEnd(self): return _Freestyle.NonTVertex_edgesEnd(self)
    def edgesIterator(self, *args): return _Freestyle.NonTVertex_edgesIterator(self, *args)
NonTVertex_swigregister = _Freestyle.NonTVertex_swigregister
NonTVertex_swigregister(NonTVertex)

class ViewEdge(Interface1D):
    __swig_setmethods__ = {}
    for _s in [Interface1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewEdge, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewEdge, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.ViewEdge_getExactTypeName(self)
    def getId(self): return _Freestyle.ViewEdge_getId(self)
    def getNature(self): return _Freestyle.ViewEdge_getNature(self)
    __swig_setmethods__["userdata"] = _Freestyle.ViewEdge_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewEdge_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewEdge_userdata_get, _Freestyle.ViewEdge_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewEdge(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ViewEdge
    __del__ = lambda self : None;
    def A(self): return _Freestyle.ViewEdge_A(self)
    def B(self): return _Freestyle.ViewEdge_B(self)
    def fedgeA(self): return _Freestyle.ViewEdge_fedgeA(self)
    def fedgeB(self): return _Freestyle.ViewEdge_fedgeB(self)
    def viewShape(self): return _Freestyle.ViewEdge_viewShape(self)
    def isClosed(self): return _Freestyle.ViewEdge_isClosed(self)
    def getChainingTimeStamp(self): return _Freestyle.ViewEdge_getChainingTimeStamp(self)
    def aShape(self, *args): return _Freestyle.ViewEdge_aShape(self, *args)
    def bShape(self): return _Freestyle.ViewEdge_bShape(self)
    def occluders(self): return _Freestyle.ViewEdge_occluders(self)
    def splittingId(self): return _Freestyle.ViewEdge_splittingId(self)
    def SetA(self, *args): return _Freestyle.ViewEdge_SetA(self, *args)
    def SetB(self, *args): return _Freestyle.ViewEdge_SetB(self, *args)
    def SetNature(self, *args): return _Freestyle.ViewEdge_SetNature(self, *args)
    def SetFEdgeA(self, *args): return _Freestyle.ViewEdge_SetFEdgeA(self, *args)
    def SetFEdgeB(self, *args): return _Freestyle.ViewEdge_SetFEdgeB(self, *args)
    def SetShape(self, *args): return _Freestyle.ViewEdge_SetShape(self, *args)
    def SetId(self, *args): return _Freestyle.ViewEdge_SetId(self, *args)
    def UpdateFEdges(self): return _Freestyle.ViewEdge_UpdateFEdges(self)
    def SetaShape(self, *args): return _Freestyle.ViewEdge_SetaShape(self, *args)
    def SetQI(self, *args): return _Freestyle.ViewEdge_SetQI(self, *args)
    def setChainingTimeStamp(self, *args): return _Freestyle.ViewEdge_setChainingTimeStamp(self, *args)
    def AddOccluder(self, *args): return _Freestyle.ViewEdge_AddOccluder(self, *args)
    def setSplittingId(self, *args): return _Freestyle.ViewEdge_setSplittingId(self, *args)
    def MarkInconsistent(self, v=True): return _Freestyle.ViewEdge_MarkInconsistent(self, v)
    def MarkAmbiguous(self, v=True): return _Freestyle.ViewEdge_MarkAmbiguous(self, v)
    def FixAmbiguous(self): return _Freestyle.ViewEdge_FixAmbiguous(self)
    __swig_setmethods__["visVotes"] = _Freestyle.ViewEdge_visVotes_set
    __swig_getmethods__["visVotes"] = _Freestyle.ViewEdge_visVotes_get
    if _newclass:visVotes = _swig_property(_Freestyle.ViewEdge_visVotes_get, _Freestyle.ViewEdge_visVotes_set)
    __swig_setmethods__["invisVotes"] = _Freestyle.ViewEdge_invisVotes_set
    __swig_getmethods__["invisVotes"] = _Freestyle.ViewEdge_invisVotes_get
    if _newclass:invisVotes = _swig_property(_Freestyle.ViewEdge_invisVotes_get, _Freestyle.ViewEdge_invisVotes_set)
    def colorID(self): return _Freestyle.ViewEdge_colorID(self)
    def intersect_2d_area(self, *args): return _Freestyle.ViewEdge_intersect_2d_area(self, *args)
    def include_in_2d_area(self, *args): return _Freestyle.ViewEdge_include_in_2d_area(self, *args)
    def getLength2D(self): return _Freestyle.ViewEdge_getLength2D(self)
    def qi(self): return _Freestyle.ViewEdge_qi(self)
    def occluders_begin(self): return _Freestyle.ViewEdge_occluders_begin(self)
    def occluders_end(self): return _Freestyle.ViewEdge_occluders_end(self)
    def occluders_size(self): return _Freestyle.ViewEdge_occluders_size(self)
    def occluders_empty(self): return _Freestyle.ViewEdge_occluders_empty(self)
    def occludee(self): return _Freestyle.ViewEdge_occludee(self)
    def occluded_shape(self): return _Freestyle.ViewEdge_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.ViewEdge_occludee_empty(self)
    def shape_id(self): return _Freestyle.ViewEdge_shape_id(self)
    def shape(self): return _Freestyle.ViewEdge_shape(self)
    def shape_importance(self): return _Freestyle.ViewEdge_shape_importance(self)
    def inconsistentVisibility(self): return _Freestyle.ViewEdge_inconsistentVisibility(self)
    def ambiguousVisibility(self): return _Freestyle.ViewEdge_ambiguousVisibility(self)
    def wasAmbiguous(self): return _Freestyle.ViewEdge_wasAmbiguous(self)
    def verticesBegin(self): return _Freestyle.ViewEdge_verticesBegin(self)
    def verticesEnd(self): return _Freestyle.ViewEdge_verticesEnd(self)
    def pointsBegin(self, t=0.): return _Freestyle.ViewEdge_pointsBegin(self, t)
    def pointsEnd(self, t=0.): return _Freestyle.ViewEdge_pointsEnd(self, t)
ViewEdge_swigregister = _Freestyle.ViewEdge_swigregister
ViewEdge_swigregister(ViewEdge)

class ViewShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewShape, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userdata"] = _Freestyle.ViewShape_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewShape_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewShape_userdata_get, _Freestyle.ViewShape_userdata_set)
    def __init__(self, *args): 
        this = _Freestyle.new_ViewShape(*args)
        try: self.this.append(this)
        except: self.this = this
    def dupplicate(self): return _Freestyle.ViewShape_dupplicate(self)
    __swig_destroy__ = _Freestyle.delete_ViewShape
    __del__ = lambda self : None;
    def SplitEdge(self, *args): return _Freestyle.ViewShape_SplitEdge(self, *args)
    def sshape(self, *args): return _Freestyle.ViewShape_sshape(self, *args)
    def vertices(self): return _Freestyle.ViewShape_vertices(self)
    def edges(self): return _Freestyle.ViewShape_edges(self)
    def getId(self): return _Freestyle.ViewShape_getId(self)
    def SetSShape(self, *args): return _Freestyle.ViewShape_SetSShape(self, *args)
    def SetVertices(self, *args): return _Freestyle.ViewShape_SetVertices(self, *args)
    def SetEdges(self, *args): return _Freestyle.ViewShape_SetEdges(self, *args)
    def AddVertex(self, *args): return _Freestyle.ViewShape_AddVertex(self, *args)
    def AddEdge(self, *args): return _Freestyle.ViewShape_AddEdge(self, *args)
    def RemoveEdge(self, *args): return _Freestyle.ViewShape_RemoveEdge(self, *args)
    def RemoveVertex(self, *args): return _Freestyle.ViewShape_RemoveVertex(self, *args)
ViewShape_swigregister = _Freestyle.ViewShape_swigregister
ViewShape_swigregister(ViewShape)

class DebugVisOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DebugVisOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DebugVisOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["showMesh"] = _Freestyle.DebugVisOptions_showMesh_set
    __swig_getmethods__["showMesh"] = _Freestyle.DebugVisOptions_showMesh_get
    if _newclass:showMesh = _swig_property(_Freestyle.DebugVisOptions_showMesh_get, _Freestyle.DebugVisOptions_showMesh_set)
    __swig_setmethods__["showViewEdges"] = _Freestyle.DebugVisOptions_showViewEdges_set
    __swig_getmethods__["showViewEdges"] = _Freestyle.DebugVisOptions_showViewEdges_get
    if _newclass:showViewEdges = _swig_property(_Freestyle.DebugVisOptions_showViewEdges_get, _Freestyle.DebugVisOptions_showViewEdges_set)
    __swig_setmethods__["showPoints"] = _Freestyle.DebugVisOptions_showPoints_set
    __swig_getmethods__["showPoints"] = _Freestyle.DebugVisOptions_showPoints_get
    if _newclass:showPoints = _swig_property(_Freestyle.DebugVisOptions_showPoints_get, _Freestyle.DebugVisOptions_showPoints_set)
    __swig_setmethods__["showRIFPoints"] = _Freestyle.DebugVisOptions_showRIFPoints_set
    __swig_getmethods__["showRIFPoints"] = _Freestyle.DebugVisOptions_showRIFPoints_get
    if _newclass:showRIFPoints = _swig_property(_Freestyle.DebugVisOptions_showRIFPoints_get, _Freestyle.DebugVisOptions_showRIFPoints_set)
    __swig_setmethods__["visibleOnly"] = _Freestyle.DebugVisOptions_visibleOnly_set
    __swig_getmethods__["visibleOnly"] = _Freestyle.DebugVisOptions_visibleOnly_get
    if _newclass:visibleOnly = _swig_property(_Freestyle.DebugVisOptions_visibleOnly_get, _Freestyle.DebugVisOptions_visibleOnly_set)
    __swig_setmethods__["showPunchouts"] = _Freestyle.DebugVisOptions_showPunchouts_set
    __swig_getmethods__["showPunchouts"] = _Freestyle.DebugVisOptions_showPunchouts_get
    if _newclass:showPunchouts = _swig_property(_Freestyle.DebugVisOptions_showPunchouts_get, _Freestyle.DebugVisOptions_showPunchouts_set)
    __swig_setmethods__["showPOCuspTesselation"] = _Freestyle.DebugVisOptions_showPOCuspTesselation_set
    __swig_getmethods__["showPOCuspTesselation"] = _Freestyle.DebugVisOptions_showPOCuspTesselation_get
    if _newclass:showPOCuspTesselation = _swig_property(_Freestyle.DebugVisOptions_showPOCuspTesselation_get, _Freestyle.DebugVisOptions_showPOCuspTesselation_set)
    __swig_setmethods__["showPairs"] = _Freestyle.DebugVisOptions_showPairs_set
    __swig_getmethods__["showPairs"] = _Freestyle.DebugVisOptions_showPairs_get
    if _newclass:showPairs = _swig_property(_Freestyle.DebugVisOptions_showPairs_get, _Freestyle.DebugVisOptions_showPairs_set)
    __swig_setmethods__["radialCurvaturePoints"] = _Freestyle.DebugVisOptions_radialCurvaturePoints_set
    __swig_getmethods__["radialCurvaturePoints"] = _Freestyle.DebugVisOptions_radialCurvaturePoints_get
    if _newclass:radialCurvaturePoints = _swig_property(_Freestyle.DebugVisOptions_radialCurvaturePoints_get, _Freestyle.DebugVisOptions_radialCurvaturePoints_set)
    __swig_setmethods__["normals"] = _Freestyle.DebugVisOptions_normals_set
    __swig_getmethods__["normals"] = _Freestyle.DebugVisOptions_normals_get
    if _newclass:normals = _swig_property(_Freestyle.DebugVisOptions_normals_get, _Freestyle.DebugVisOptions_normals_set)
    __swig_setmethods__["showViewVertices"] = _Freestyle.DebugVisOptions_showViewVertices_set
    __swig_getmethods__["showViewVertices"] = _Freestyle.DebugVisOptions_showViewVertices_get
    if _newclass:showViewVertices = _swig_property(_Freestyle.DebugVisOptions_showViewVertices_get, _Freestyle.DebugVisOptions_showViewVertices_set)
    __swig_setmethods__["nDotVshading"] = _Freestyle.DebugVisOptions_nDotVshading_set
    __swig_getmethods__["nDotVshading"] = _Freestyle.DebugVisOptions_nDotVshading_get
    if _newclass:nDotVshading = _swig_property(_Freestyle.DebugVisOptions_nDotVshading_get, _Freestyle.DebugVisOptions_nDotVshading_set)
    __swig_setmethods__["showWireframe"] = _Freestyle.DebugVisOptions_showWireframe_set
    __swig_getmethods__["showWireframe"] = _Freestyle.DebugVisOptions_showWireframe_get
    if _newclass:showWireframe = _swig_property(_Freestyle.DebugVisOptions_showWireframe_get, _Freestyle.DebugVisOptions_showWireframe_set)
    __swig_setmethods__["showInconsistentFaces"] = _Freestyle.DebugVisOptions_showInconsistentFaces_set
    __swig_getmethods__["showInconsistentFaces"] = _Freestyle.DebugVisOptions_showInconsistentFaces_get
    if _newclass:showInconsistentFaces = _swig_property(_Freestyle.DebugVisOptions_showInconsistentFaces_get, _Freestyle.DebugVisOptions_showInconsistentFaces_set)
    __swig_setmethods__["showRadial"] = _Freestyle.DebugVisOptions_showRadial_set
    __swig_getmethods__["showRadial"] = _Freestyle.DebugVisOptions_showRadial_get
    if _newclass:showRadial = _swig_property(_Freestyle.DebugVisOptions_showRadial_get, _Freestyle.DebugVisOptions_showRadial_set)
    __swig_setmethods__["lighting"] = _Freestyle.DebugVisOptions_lighting_set
    __swig_getmethods__["lighting"] = _Freestyle.DebugVisOptions_lighting_get
    if _newclass:lighting = _swig_property(_Freestyle.DebugVisOptions_lighting_get, _Freestyle.DebugVisOptions_lighting_set)
    EC_TYPE = _Freestyle.DebugVisOptions_EC_TYPE
    EC_ID_COLOR = _Freestyle.DebugVisOptions_EC_ID_COLOR
    __swig_setmethods__["edgeColors"] = _Freestyle.DebugVisOptions_edgeColors_set
    __swig_getmethods__["edgeColors"] = _Freestyle.DebugVisOptions_edgeColors_get
    if _newclass:edgeColors = _swig_property(_Freestyle.DebugVisOptions_edgeColors_get, _Freestyle.DebugVisOptions_edgeColors_set)
    __swig_setmethods__["showSpecificPoints"] = _Freestyle.DebugVisOptions_showSpecificPoints_set
    __swig_getmethods__["showSpecificPoints"] = _Freestyle.DebugVisOptions_showSpecificPoints_get
    if _newclass:showSpecificPoints = _swig_property(_Freestyle.DebugVisOptions_showSpecificPoints_get, _Freestyle.DebugVisOptions_showSpecificPoints_set)
    __swig_setmethods__["pointsToShow"] = _Freestyle.DebugVisOptions_pointsToShow_set
    __swig_getmethods__["pointsToShow"] = _Freestyle.DebugVisOptions_pointsToShow_get
    if _newclass:pointsToShow = _swig_property(_Freestyle.DebugVisOptions_pointsToShow_get, _Freestyle.DebugVisOptions_pointsToShow_set)
    __swig_setmethods__["limitRegion"] = _Freestyle.DebugVisOptions_limitRegion_set
    __swig_getmethods__["limitRegion"] = _Freestyle.DebugVisOptions_limitRegion_get
    if _newclass:limitRegion = _swig_property(_Freestyle.DebugVisOptions_limitRegion_get, _Freestyle.DebugVisOptions_limitRegion_set)
    __swig_setmethods__["regionIndex"] = _Freestyle.DebugVisOptions_regionIndex_set
    __swig_getmethods__["regionIndex"] = _Freestyle.DebugVisOptions_regionIndex_get
    if _newclass:regionIndex = _swig_property(_Freestyle.DebugVisOptions_regionIndex_get, _Freestyle.DebugVisOptions_regionIndex_set)
    __swig_setmethods__["selectionName"] = _Freestyle.DebugVisOptions_selectionName_set
    __swig_getmethods__["selectionName"] = _Freestyle.DebugVisOptions_selectionName_get
    if _newclass:selectionName = _swig_property(_Freestyle.DebugVisOptions_selectionName_get, _Freestyle.DebugVisOptions_selectionName_set)
    def __init__(self): 
        this = _Freestyle.new_DebugVisOptions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_DebugVisOptions
    __del__ = lambda self : None;
DebugVisOptions_swigregister = _Freestyle.DebugVisOptions_swigregister
DebugVisOptions_swigregister(DebugVisOptions)

class ViewVertexOrientedViewEdgeIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewVertexOrientedViewEdgeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewVertexOrientedViewEdgeIterator, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_ViewVertexOrientedViewEdgeIterator
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _Freestyle.new_ViewVertexOrientedViewEdgeIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def isBegin(self): return _Freestyle.ViewVertexOrientedViewEdgeIterator_isBegin(self)
    def isEnd(self): return _Freestyle.ViewVertexOrientedViewEdgeIterator_isEnd(self)
    def __ne__(self, *args): return _Freestyle.ViewVertexOrientedViewEdgeIterator___ne__(self, *args)
    def __eq__(self, *args): return _Freestyle.ViewVertexOrientedViewEdgeIterator___eq__(self, *args)
    def getObject(self): return _Freestyle.ViewVertexOrientedViewEdgeIterator_getObject(self)
    def __deref__(self): return _Freestyle.ViewVertexOrientedViewEdgeIterator___deref__(self)
    def increment(self): return _Freestyle.ViewVertexOrientedViewEdgeIterator_increment(self)
ViewVertexOrientedViewEdgeIterator_swigregister = _Freestyle.ViewVertexOrientedViewEdgeIterator_swigregister
ViewVertexOrientedViewEdgeIterator_swigregister(ViewVertexOrientedViewEdgeIterator)

class ViewEdgeSVertexIterator(Interface0DIteratorNested):
    __swig_setmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewEdgeSVertexIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewEdgeSVertexIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ViewEdgeSVertexIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ViewEdgeSVertexIterator
    __del__ = lambda self : None;
    def getExactTypeName(self): return _Freestyle.ViewEdgeSVertexIterator_getExactTypeName(self)
    def getObject(self): return _Freestyle.ViewEdgeSVertexIterator_getObject(self)
    def __deref__(self): return _Freestyle.ViewEdgeSVertexIterator___deref__(self)
    def increment(self): return _Freestyle.ViewEdgeSVertexIterator_increment(self)
    def decrement(self): return _Freestyle.ViewEdgeSVertexIterator_decrement(self)
    def isBegin(self): return _Freestyle.ViewEdgeSVertexIterator_isBegin(self)
    def isEnd(self): return _Freestyle.ViewEdgeSVertexIterator_isEnd(self)
    def t(self): return _Freestyle.ViewEdgeSVertexIterator_t(self)
    def u(self): return _Freestyle.ViewEdgeSVertexIterator_u(self)
    def __eq__(self, *args): return _Freestyle.ViewEdgeSVertexIterator___eq__(self, *args)
    def copy(self): return _Freestyle.ViewEdgeSVertexIterator_copy(self)
    def getX(self): return _Freestyle.ViewEdgeSVertexIterator_getX(self)
    def getY(self): return _Freestyle.ViewEdgeSVertexIterator_getY(self)
    def getZ(self): return _Freestyle.ViewEdgeSVertexIterator_getZ(self)
    def getPoint3D(self): return _Freestyle.ViewEdgeSVertexIterator_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.ViewEdgeSVertexIterator_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.ViewEdgeSVertexIterator_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.ViewEdgeSVertexIterator_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.ViewEdgeSVertexIterator_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.ViewEdgeSVertexIterator_getFEdge(self, *args)
    def getId(self): return _Freestyle.ViewEdgeSVertexIterator_getId(self)
    def getNature(self): return _Freestyle.ViewEdgeSVertexIterator_getNature(self)
    def castToSVertex(self): return _Freestyle.ViewEdgeSVertexIterator_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.ViewEdgeSVertexIterator_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.ViewEdgeSVertexIterator_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.ViewEdgeSVertexIterator_castToTVertex(self)
    __swig_setmethods__["userdata"] = _Freestyle.ViewEdgeSVertexIterator_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewEdgeSVertexIterator_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewEdgeSVertexIterator_userdata_get, _Freestyle.ViewEdgeSVertexIterator_userdata_set)
    def dupplicate(self): return _Freestyle.ViewEdgeSVertexIterator_dupplicate(self)
    def point3D(self): return _Freestyle.ViewEdgeSVertexIterator_point3D(self)
    def point2D(self): return _Freestyle.ViewEdgeSVertexIterator_point2D(self)
    def normals(self): return _Freestyle.ViewEdgeSVertexIterator_normals(self)
    def normalsSize(self): return _Freestyle.ViewEdgeSVertexIterator_normalsSize(self)
    def fedges(self): return _Freestyle.ViewEdgeSVertexIterator_fedges(self)
    def fedges_begin(self): return _Freestyle.ViewEdgeSVertexIterator_fedges_begin(self)
    def fedges_end(self): return _Freestyle.ViewEdgeSVertexIterator_fedges_end(self)
    def shape(self, *args): return _Freestyle.ViewEdgeSVertexIterator_shape(self, *args)
    def z(self): return _Freestyle.ViewEdgeSVertexIterator_z(self)
    def viewvertex(self): return _Freestyle.ViewEdgeSVertexIterator_viewvertex(self)
    def SetPoint3D(self, *args): return _Freestyle.ViewEdgeSVertexIterator_SetPoint3D(self, *args)
    def SetPoint2D(self, *args): return _Freestyle.ViewEdgeSVertexIterator_SetPoint2D(self, *args)
    def AddNormal(self, *args): return _Freestyle.ViewEdgeSVertexIterator_AddNormal(self, *args)
    def setCurvatureInfo(self, *args): return _Freestyle.ViewEdgeSVertexIterator_setCurvatureInfo(self, *args)
    def getCurvatureInfo(self): return _Freestyle.ViewEdgeSVertexIterator_getCurvatureInfo(self)
    def GetIsophoteDistance(self, *args): return _Freestyle.ViewEdgeSVertexIterator_GetIsophoteDistance(self, *args)
    def ImageSpaceNormal(self): return _Freestyle.ViewEdgeSVertexIterator_ImageSpaceNormal(self)
    def setCurvatureFredo(self, *args): return _Freestyle.ViewEdgeSVertexIterator_setCurvatureFredo(self, *args)
    def setDirectionFredo(self, *args): return _Freestyle.ViewEdgeSVertexIterator_setDirectionFredo(self, *args)
    def curvatureFredo(self): return _Freestyle.ViewEdgeSVertexIterator_curvatureFredo(self)
    def directionFredo(self): return _Freestyle.ViewEdgeSVertexIterator_directionFredo(self)
    def SetId(self, *args): return _Freestyle.ViewEdgeSVertexIterator_SetId(self, *args)
    def SetFEdges(self, *args): return _Freestyle.ViewEdgeSVertexIterator_SetFEdges(self, *args)
    def SetShape(self, *args): return _Freestyle.ViewEdgeSVertexIterator_SetShape(self, *args)
    def SetViewVertex(self, *args): return _Freestyle.ViewEdgeSVertexIterator_SetViewVertex(self, *args)
    def AddFEdge(self, *args): return _Freestyle.ViewEdgeSVertexIterator_AddFEdge(self, *args)
    def Replace(self, *args): return _Freestyle.ViewEdgeSVertexIterator_Replace(self, *args)
    def getColorID(self): return _Freestyle.ViewEdgeSVertexIterator_getColorID(self)
    def SetSourceEdge(self, *args): return _Freestyle.ViewEdgeSVertexIterator_SetSourceEdge(self, *args)
    def GetSourceEdge(self): return _Freestyle.ViewEdgeSVertexIterator_GetSourceEdge(self)
    def SetSourceVertex(self, *args): return _Freestyle.ViewEdgeSVertexIterator_SetSourceVertex(self, *args)
    def GetSourceVertex(self): return _Freestyle.ViewEdgeSVertexIterator_GetSourceVertex(self)
    def fedge(self): return _Freestyle.ViewEdgeSVertexIterator_fedge(self)
    def point2d(self): return _Freestyle.ViewEdgeSVertexIterator_point2d(self)
    def point3d(self): return _Freestyle.ViewEdgeSVertexIterator_point3d(self)
    def normal(self): return _Freestyle.ViewEdgeSVertexIterator_normal(self)
    def shape_id(self): return _Freestyle.ViewEdgeSVertexIterator_shape_id(self)
    def shape_importance(self): return _Freestyle.ViewEdgeSVertexIterator_shape_importance(self)
    def qi(self): return _Freestyle.ViewEdgeSVertexIterator_qi(self)
    def occluders_begin(self): return _Freestyle.ViewEdgeSVertexIterator_occluders_begin(self)
    def occluders_end(self): return _Freestyle.ViewEdgeSVertexIterator_occluders_end(self)
    def occluders_empty(self): return _Freestyle.ViewEdgeSVertexIterator_occluders_empty(self)
    def occluders_size(self): return _Freestyle.ViewEdgeSVertexIterator_occluders_size(self)
    def occludee(self): return _Freestyle.ViewEdgeSVertexIterator_occludee(self)
    def occluded_shape(self): return _Freestyle.ViewEdgeSVertexIterator_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.ViewEdgeSVertexIterator_occludee_empty(self)
    def z_discontinuity(self): return _Freestyle.ViewEdgeSVertexIterator_z_discontinuity(self)
    def POProjected(self): return _Freestyle.ViewEdgeSVertexIterator_POProjected(self)
    def SetPOProjected(self): return _Freestyle.ViewEdgeSVertexIterator_SetPOProjected(self)
ViewEdgeSVertexIterator_swigregister = _Freestyle.ViewEdgeSVertexIterator_swigregister
ViewEdgeSVertexIterator_swigregister(ViewEdgeSVertexIterator)

class ViewEdgeViewEdgeIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewEdgeViewEdgeIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ViewEdgeViewEdgeIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ViewEdgeViewEdgeIterator:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_ViewEdgeViewEdgeIterator(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ViewEdgeViewEdgeIterator
    __del__ = lambda self : None;
    def getExactTypeName(self): return _Freestyle.ViewEdgeViewEdgeIterator_getExactTypeName(self)
    def getCurrentEdge(self): return _Freestyle.ViewEdgeViewEdgeIterator_getCurrentEdge(self)
    def setCurrentEdge(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_setCurrentEdge(self, *args)
    def getBegin(self): return _Freestyle.ViewEdgeViewEdgeIterator_getBegin(self)
    def setBegin(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_setBegin(self, *args)
    def getOrientation(self): return _Freestyle.ViewEdgeViewEdgeIterator_getOrientation(self)
    def setOrientation(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_setOrientation(self, *args)
    def changeOrientation(self): return _Freestyle.ViewEdgeViewEdgeIterator_changeOrientation(self)
    def getObject(self): return _Freestyle.ViewEdgeViewEdgeIterator_getObject(self)
    def __deref__(self): return _Freestyle.ViewEdgeViewEdgeIterator___deref__(self)
    def increment(self): return _Freestyle.ViewEdgeViewEdgeIterator_increment(self)
    def decrement(self): return _Freestyle.ViewEdgeViewEdgeIterator_decrement(self)
    def isBegin(self): return _Freestyle.ViewEdgeViewEdgeIterator_isBegin(self)
    def isEnd(self): return _Freestyle.ViewEdgeViewEdgeIterator_isEnd(self)
    def __eq__(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator___eq__(self, *args)
    def __ne__(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator___ne__(self, *args)
    def getId(self): return _Freestyle.ViewEdgeViewEdgeIterator_getId(self)
    def getNature(self): return _Freestyle.ViewEdgeViewEdgeIterator_getNature(self)
    __swig_setmethods__["userdata"] = _Freestyle.ViewEdgeViewEdgeIterator_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.ViewEdgeViewEdgeIterator_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.ViewEdgeViewEdgeIterator_userdata_get, _Freestyle.ViewEdgeViewEdgeIterator_userdata_set)
    def A(self): return _Freestyle.ViewEdgeViewEdgeIterator_A(self)
    def B(self): return _Freestyle.ViewEdgeViewEdgeIterator_B(self)
    def fedgeA(self): return _Freestyle.ViewEdgeViewEdgeIterator_fedgeA(self)
    def fedgeB(self): return _Freestyle.ViewEdgeViewEdgeIterator_fedgeB(self)
    def viewShape(self): return _Freestyle.ViewEdgeViewEdgeIterator_viewShape(self)
    def aShape(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_aShape(self, *args)
    def isClosed(self): return _Freestyle.ViewEdgeViewEdgeIterator_isClosed(self)
    def getChainingTimeStamp(self): return _Freestyle.ViewEdgeViewEdgeIterator_getChainingTimeStamp(self)
    def bShape(self): return _Freestyle.ViewEdgeViewEdgeIterator_bShape(self)
    def occluders(self): return _Freestyle.ViewEdgeViewEdgeIterator_occluders(self)
    def splittingId(self): return _Freestyle.ViewEdgeViewEdgeIterator_splittingId(self)
    def SetA(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetA(self, *args)
    def SetB(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetB(self, *args)
    def SetNature(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetNature(self, *args)
    def SetFEdgeA(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetFEdgeA(self, *args)
    def SetFEdgeB(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetFEdgeB(self, *args)
    def SetShape(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetShape(self, *args)
    def SetId(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetId(self, *args)
    def UpdateFEdges(self): return _Freestyle.ViewEdgeViewEdgeIterator_UpdateFEdges(self)
    def SetaShape(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetaShape(self, *args)
    def SetQI(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_SetQI(self, *args)
    def setChainingTimeStamp(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_setChainingTimeStamp(self, *args)
    def AddOccluder(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_AddOccluder(self, *args)
    def setSplittingId(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_setSplittingId(self, *args)
    def MarkInconsistent(self, v=True): return _Freestyle.ViewEdgeViewEdgeIterator_MarkInconsistent(self, v)
    def MarkAmbiguous(self, v=True): return _Freestyle.ViewEdgeViewEdgeIterator_MarkAmbiguous(self, v)
    def FixAmbiguous(self): return _Freestyle.ViewEdgeViewEdgeIterator_FixAmbiguous(self)
    __swig_setmethods__["visVotes"] = _Freestyle.ViewEdgeViewEdgeIterator_visVotes_set
    __swig_getmethods__["visVotes"] = _Freestyle.ViewEdgeViewEdgeIterator_visVotes_get
    if _newclass:visVotes = _swig_property(_Freestyle.ViewEdgeViewEdgeIterator_visVotes_get, _Freestyle.ViewEdgeViewEdgeIterator_visVotes_set)
    __swig_setmethods__["invisVotes"] = _Freestyle.ViewEdgeViewEdgeIterator_invisVotes_set
    __swig_getmethods__["invisVotes"] = _Freestyle.ViewEdgeViewEdgeIterator_invisVotes_get
    if _newclass:invisVotes = _swig_property(_Freestyle.ViewEdgeViewEdgeIterator_invisVotes_get, _Freestyle.ViewEdgeViewEdgeIterator_invisVotes_set)
    def colorID(self): return _Freestyle.ViewEdgeViewEdgeIterator_colorID(self)
    def intersect_2d_area(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_intersect_2d_area(self, *args)
    def include_in_2d_area(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_include_in_2d_area(self, *args)
    def getLength2D(self): return _Freestyle.ViewEdgeViewEdgeIterator_getLength2D(self)
    def qi(self): return _Freestyle.ViewEdgeViewEdgeIterator_qi(self)
    def occluders_begin(self): return _Freestyle.ViewEdgeViewEdgeIterator_occluders_begin(self)
    def occluders_end(self): return _Freestyle.ViewEdgeViewEdgeIterator_occluders_end(self)
    def occluders_size(self): return _Freestyle.ViewEdgeViewEdgeIterator_occluders_size(self)
    def occluders_empty(self): return _Freestyle.ViewEdgeViewEdgeIterator_occluders_empty(self)
    def occludee(self): return _Freestyle.ViewEdgeViewEdgeIterator_occludee(self)
    def occluded_shape(self): return _Freestyle.ViewEdgeViewEdgeIterator_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.ViewEdgeViewEdgeIterator_occludee_empty(self)
    def shape_id(self): return _Freestyle.ViewEdgeViewEdgeIterator_shape_id(self)
    def shape(self): return _Freestyle.ViewEdgeViewEdgeIterator_shape(self)
    def shape_importance(self): return _Freestyle.ViewEdgeViewEdgeIterator_shape_importance(self)
    def inconsistentVisibility(self): return _Freestyle.ViewEdgeViewEdgeIterator_inconsistentVisibility(self)
    def ambiguousVisibility(self): return _Freestyle.ViewEdgeViewEdgeIterator_ambiguousVisibility(self)
    def wasAmbiguous(self): return _Freestyle.ViewEdgeViewEdgeIterator_wasAmbiguous(self)
    def verticesBegin(self): return _Freestyle.ViewEdgeViewEdgeIterator_verticesBegin(self)
    def verticesEnd(self): return _Freestyle.ViewEdgeViewEdgeIterator_verticesEnd(self)
    def pointsBegin(self, t=0.): return _Freestyle.ViewEdgeViewEdgeIterator_pointsBegin(self, t)
    def pointsEnd(self, t=0.): return _Freestyle.ViewEdgeViewEdgeIterator_pointsEnd(self, t)
    def printRefStats(self): return _Freestyle.ViewEdgeViewEdgeIterator_printRefStats(self)
    def eraseAllI1Ds(self): return _Freestyle.ViewEdgeViewEdgeIterator_eraseAllI1Ds(self)
    def getTimeStamp(self): return _Freestyle.ViewEdgeViewEdgeIterator_getTimeStamp(self)
    def setTimeStamp(self, *args): return _Freestyle.ViewEdgeViewEdgeIterator_setTimeStamp(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_ViewEdgeViewEdgeIterator(self)
        return weakref_proxy(self)
ViewEdgeViewEdgeIterator_swigregister = _Freestyle.ViewEdgeViewEdgeIterator_swigregister
ViewEdgeViewEdgeIterator_swigregister(ViewEdgeViewEdgeIterator)

class UnaryFunction0DVoid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DVoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DVoid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryFunction0DVoid:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction0DVoid(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DVoid
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DVoid_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DVoid___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DVoid(self)
        return weakref_proxy(self)
UnaryFunction0DVoid_swigregister = _Freestyle.UnaryFunction0DVoid_swigregister
UnaryFunction0DVoid_swigregister(UnaryFunction0DVoid)

class UnaryFunction0DUnsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DUnsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DUnsigned, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryFunction0DUnsigned:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction0DUnsigned(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DUnsigned
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DUnsigned_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DUnsigned___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DUnsigned(self)
        return weakref_proxy(self)
UnaryFunction0DUnsigned_swigregister = _Freestyle.UnaryFunction0DUnsigned_swigregister
UnaryFunction0DUnsigned_swigregister(UnaryFunction0DUnsigned)

class UnaryFunction0DFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DFloat, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryFunction0DFloat:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction0DFloat(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DFloat
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DFloat_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DFloat___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DFloat(self)
        return weakref_proxy(self)
UnaryFunction0DFloat_swigregister = _Freestyle.UnaryFunction0DFloat_swigregister
UnaryFunction0DFloat_swigregister(UnaryFunction0DFloat)

class UnaryFunction0DDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DDouble, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryFunction0DDouble:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction0DDouble(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DDouble
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DDouble_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DDouble___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DDouble(self)
        return weakref_proxy(self)
UnaryFunction0DDouble_swigregister = _Freestyle.UnaryFunction0DDouble_swigregister
UnaryFunction0DDouble_swigregister(UnaryFunction0DDouble)

class UnaryFunction0DVec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DVec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DVec2f, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryFunction0DVec2f:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction0DVec2f(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DVec2f
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DVec2f_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DVec2f___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DVec2f(self)
        return weakref_proxy(self)
UnaryFunction0DVec2f_swigregister = _Freestyle.UnaryFunction0DVec2f_swigregister
UnaryFunction0DVec2f_swigregister(UnaryFunction0DVec2f)

class UnaryFunction0DVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DVec3f, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryFunction0DVec3f:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction0DVec3f(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DVec3f
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DVec3f_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DVec3f___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DVec3f(self)
        return weakref_proxy(self)
UnaryFunction0DVec3f_swigregister = _Freestyle.UnaryFunction0DVec3f_swigregister
UnaryFunction0DVec3f_swigregister(UnaryFunction0DVec3f)

class UnaryFunction0DId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DId, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryFunction0DId:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction0DId(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DId
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DId_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DId___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction0DId(self)
        return weakref_proxy(self)
UnaryFunction0DId_swigregister = _Freestyle.UnaryFunction0DId_swigregister
UnaryFunction0DId_swigregister(UnaryFunction0DId)

class UnaryFunction0DViewShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DViewShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DViewShape, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_UnaryFunction0DViewShape()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DViewShape
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DViewShape_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DViewShape___call__(self, *args)
UnaryFunction0DViewShape_swigregister = _Freestyle.UnaryFunction0DViewShape_swigregister
UnaryFunction0DViewShape_swigregister(UnaryFunction0DViewShape)

class UnaryFunction0DVectorViewShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction0DVectorViewShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction0DVectorViewShape, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_UnaryFunction0DVectorViewShape()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction0DVectorViewShape
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction0DVectorViewShape_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction0DVectorViewShape___call__(self, *args)
UnaryFunction0DVectorViewShape_swigregister = _Freestyle.UnaryFunction0DVectorViewShape_swigregister
UnaryFunction0DVectorViewShape_swigregister(UnaryFunction0DVectorViewShape)

class GetXF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetXF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetXF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetXF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetXF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetXF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetXF0D
    __del__ = lambda self : None;
GetXF0D_swigregister = _Freestyle.GetXF0D_swigregister
GetXF0D_swigregister(GetXF0D)

class GetYF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetYF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetYF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetYF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetYF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetYF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetYF0D
    __del__ = lambda self : None;
GetYF0D_swigregister = _Freestyle.GetYF0D_swigregister
GetYF0D_swigregister(GetYF0D)

class GetZF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetZF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetZF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetZF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetZF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetZF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetZF0D
    __del__ = lambda self : None;
GetZF0D_swigregister = _Freestyle.GetZF0D_swigregister
GetZF0D_swigregister(GetZF0D)

class GetProjectedXF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedXF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedXF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetProjectedXF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetProjectedXF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetProjectedXF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetProjectedXF0D
    __del__ = lambda self : None;
GetProjectedXF0D_swigregister = _Freestyle.GetProjectedXF0D_swigregister
GetProjectedXF0D_swigregister(GetProjectedXF0D)

class GetProjectedYF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedYF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedYF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetProjectedYF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetProjectedYF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetProjectedYF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetProjectedYF0D
    __del__ = lambda self : None;
GetProjectedYF0D_swigregister = _Freestyle.GetProjectedYF0D_swigregister
GetProjectedYF0D_swigregister(GetProjectedYF0D)

class GetProjectedZF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedZF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedZF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetProjectedZF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetProjectedZF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetProjectedZF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetProjectedZF0D
    __del__ = lambda self : None;
GetProjectedZF0D_swigregister = _Freestyle.GetProjectedZF0D_swigregister
GetProjectedZF0D_swigregister(GetProjectedZF0D)

class GetCurvilinearAbscissaF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetCurvilinearAbscissaF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetCurvilinearAbscissaF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetCurvilinearAbscissaF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetCurvilinearAbscissaF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetCurvilinearAbscissaF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetCurvilinearAbscissaF0D
    __del__ = lambda self : None;
GetCurvilinearAbscissaF0D_swigregister = _Freestyle.GetCurvilinearAbscissaF0D_swigregister
GetCurvilinearAbscissaF0D_swigregister(GetCurvilinearAbscissaF0D)

class GetParameterF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetParameterF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetParameterF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetParameterF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetParameterF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetParameterF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetParameterF0D
    __del__ = lambda self : None;
GetParameterF0D_swigregister = _Freestyle.GetParameterF0D_swigregister
GetParameterF0D_swigregister(GetParameterF0D)

class VertexOrientation2DF0D(UnaryFunction0DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexOrientation2DF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexOrientation2DF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.VertexOrientation2DF0D_getName(self)
    def __call__(self, *args): return _Freestyle.VertexOrientation2DF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_VertexOrientation2DF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_VertexOrientation2DF0D
    __del__ = lambda self : None;
VertexOrientation2DF0D_swigregister = _Freestyle.VertexOrientation2DF0D_swigregister
VertexOrientation2DF0D_swigregister(VertexOrientation2DF0D)

class VertexOrientation3DF0D(UnaryFunction0DVec3f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVec3f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VertexOrientation3DF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVec3f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VertexOrientation3DF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.VertexOrientation3DF0D_getName(self)
    def __call__(self, *args): return _Freestyle.VertexOrientation3DF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_VertexOrientation3DF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_VertexOrientation3DF0D
    __del__ = lambda self : None;
VertexOrientation3DF0D_swigregister = _Freestyle.VertexOrientation3DF0D_swigregister
VertexOrientation3DF0D_swigregister(VertexOrientation3DF0D)

class Curvature2DAngleF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curvature2DAngleF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curvature2DAngleF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.Curvature2DAngleF0D_getName(self)
    def __call__(self, *args): return _Freestyle.Curvature2DAngleF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_Curvature2DAngleF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Curvature2DAngleF0D
    __del__ = lambda self : None;
Curvature2DAngleF0D_swigregister = _Freestyle.Curvature2DAngleF0D_swigregister
Curvature2DAngleF0D_swigregister(Curvature2DAngleF0D)

class ZDiscontinuityF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZDiscontinuityF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZDiscontinuityF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.ZDiscontinuityF0D_getName(self)
    def __call__(self, *args): return _Freestyle.ZDiscontinuityF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_ZDiscontinuityF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ZDiscontinuityF0D
    __del__ = lambda self : None;
ZDiscontinuityF0D_swigregister = _Freestyle.ZDiscontinuityF0D_swigregister
ZDiscontinuityF0D_swigregister(ZDiscontinuityF0D)

class IsophoteDistanceF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IsophoteDistanceF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IsophoteDistanceF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_IsophoteDistanceF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.IsophoteDistanceF0D_getName(self)
    def __call__(self, *args): return _Freestyle.IsophoteDistanceF0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_IsophoteDistanceF0D
    __del__ = lambda self : None;
IsophoteDistanceF0D_swigregister = _Freestyle.IsophoteDistanceF0D_swigregister
IsophoteDistanceF0D_swigregister(IsophoteDistanceF0D)

class ImageSpaceNormalF0D(UnaryFunction0DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageSpaceNormalF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageSpaceNormalF0D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_ImageSpaceNormalF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ImageSpaceNormalF0D
    __del__ = lambda self : None;
ImageSpaceNormalF0D_swigregister = _Freestyle.ImageSpaceNormalF0D_swigregister
ImageSpaceNormalF0D_swigregister(ImageSpaceNormalF0D)

class Normal2DF0D(UnaryFunction0DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Normal2DF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Normal2DF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.Normal2DF0D_getName(self)
    def __call__(self, *args): return _Freestyle.Normal2DF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_Normal2DF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Normal2DF0D
    __del__ = lambda self : None;
Normal2DF0D_swigregister = _Freestyle.Normal2DF0D_swigregister
Normal2DF0D_swigregister(Normal2DF0D)

class MaterialF0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialF0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.MaterialF0D_getName(self)
    def __call__(self, *args): return _Freestyle.MaterialF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_MaterialF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_MaterialF0D
    __del__ = lambda self : None;
MaterialF0D_swigregister = _Freestyle.MaterialF0D_swigregister
MaterialF0D_swigregister(MaterialF0D)

class ShapeIdF0D(UnaryFunction0DId):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DId]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeIdF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DId]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeIdF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.ShapeIdF0D_getName(self)
    def __call__(self, *args): return _Freestyle.ShapeIdF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_ShapeIdF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ShapeIdF0D
    __del__ = lambda self : None;
ShapeIdF0D_swigregister = _Freestyle.ShapeIdF0D_swigregister
ShapeIdF0D_swigregister(ShapeIdF0D)

class QuantitativeInvisibilityF0D(UnaryFunction0DUnsigned):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DUnsigned]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantitativeInvisibilityF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DUnsigned]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantitativeInvisibilityF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.QuantitativeInvisibilityF0D_getName(self)
    def __call__(self, *args): return _Freestyle.QuantitativeInvisibilityF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_QuantitativeInvisibilityF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_QuantitativeInvisibilityF0D
    __del__ = lambda self : None;
QuantitativeInvisibilityF0D_swigregister = _Freestyle.QuantitativeInvisibilityF0D_swigregister
QuantitativeInvisibilityF0D_swigregister(QuantitativeInvisibilityF0D)

class CurveNatureF0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveNatureF0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveNatureF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.CurveNatureF0D_getName(self)
    def __call__(self, *args): return _Freestyle.CurveNatureF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_CurveNatureF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_CurveNatureF0D
    __del__ = lambda self : None;
CurveNatureF0D_swigregister = _Freestyle.CurveNatureF0D_swigregister
CurveNatureF0D_swigregister(CurveNatureF0D)

class GetShapeF0D(UnaryFunction0DViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetShapeF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetShapeF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetShapeF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetShapeF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetShapeF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetShapeF0D
    __del__ = lambda self : None;
GetShapeF0D_swigregister = _Freestyle.GetShapeF0D_swigregister
GetShapeF0D_swigregister(GetShapeF0D)

class GetOccludersF0D(UnaryFunction0DVectorViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DVectorViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetOccludersF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DVectorViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetOccludersF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetOccludersF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetOccludersF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetOccludersF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetOccludersF0D
    __del__ = lambda self : None;
GetOccludersF0D_swigregister = _Freestyle.GetOccludersF0D_swigregister
GetOccludersF0D_swigregister(GetOccludersF0D)

class GetOccludeeF0D(UnaryFunction0DViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetOccludeeF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetOccludeeF0D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.GetOccludeeF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetOccludeeF0D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_GetOccludeeF0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetOccludeeF0D
    __del__ = lambda self : None;
GetOccludeeF0D_swigregister = _Freestyle.GetOccludeeF0D_swigregister
GetOccludeeF0D_swigregister(GetOccludeeF0D)


def getFEdge(*args):
  return _Freestyle.getFEdge(*args)
getFEdge = _Freestyle.getFEdge
class UnaryFunction1DVoid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DVoid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DVoid, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DVoid:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction1DVoid(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DVoid
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction1DVoid_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction1DVoid___call__(self, *args)
    def setIntegrationType(self, *args): return _Freestyle.UnaryFunction1DVoid_setIntegrationType(self, *args)
    def getIntegrationType(self): return _Freestyle.UnaryFunction1DVoid_getIntegrationType(self)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DVoid(self)
        return weakref_proxy(self)
UnaryFunction1DVoid_swigregister = _Freestyle.UnaryFunction1DVoid_swigregister
UnaryFunction1DVoid_swigregister(UnaryFunction1DVoid)

class UnaryFunction1DUnsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DUnsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DUnsigned, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DUnsigned:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction1DUnsigned(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DUnsigned
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction1DUnsigned_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction1DUnsigned___call__(self, *args)
    def setIntegrationType(self, *args): return _Freestyle.UnaryFunction1DUnsigned_setIntegrationType(self, *args)
    def getIntegrationType(self): return _Freestyle.UnaryFunction1DUnsigned_getIntegrationType(self)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DUnsigned(self)
        return weakref_proxy(self)
UnaryFunction1DUnsigned_swigregister = _Freestyle.UnaryFunction1DUnsigned_swigregister
UnaryFunction1DUnsigned_swigregister(UnaryFunction1DUnsigned)

class UnaryFunction1DFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DFloat:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction1DFloat(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DFloat
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction1DFloat_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction1DFloat___call__(self, *args)
    def setIntegrationType(self, *args): return _Freestyle.UnaryFunction1DFloat_setIntegrationType(self, *args)
    def getIntegrationType(self): return _Freestyle.UnaryFunction1DFloat_getIntegrationType(self)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DFloat(self)
        return weakref_proxy(self)
UnaryFunction1DFloat_swigregister = _Freestyle.UnaryFunction1DFloat_swigregister
UnaryFunction1DFloat_swigregister(UnaryFunction1DFloat)

class UnaryFunction1DDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DDouble:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction1DDouble(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DDouble
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction1DDouble_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction1DDouble___call__(self, *args)
    def setIntegrationType(self, *args): return _Freestyle.UnaryFunction1DDouble_setIntegrationType(self, *args)
    def getIntegrationType(self): return _Freestyle.UnaryFunction1DDouble_getIntegrationType(self)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DDouble(self)
        return weakref_proxy(self)
UnaryFunction1DDouble_swigregister = _Freestyle.UnaryFunction1DDouble_swigregister
UnaryFunction1DDouble_swigregister(UnaryFunction1DDouble)

class UnaryFunction1DVec2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DVec2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DVec2f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DVec2f:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction1DVec2f(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DVec2f
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction1DVec2f_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction1DVec2f___call__(self, *args)
    def setIntegrationType(self, *args): return _Freestyle.UnaryFunction1DVec2f_setIntegrationType(self, *args)
    def getIntegrationType(self): return _Freestyle.UnaryFunction1DVec2f_getIntegrationType(self)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DVec2f(self)
        return weakref_proxy(self)
UnaryFunction1DVec2f_swigregister = _Freestyle.UnaryFunction1DVec2f_swigregister
UnaryFunction1DVec2f_swigregister(UnaryFunction1DVec2f)

class UnaryFunction1DVec3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DVec3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DVec3f, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == UnaryFunction1DVec3f:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryFunction1DVec3f(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DVec3f
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction1DVec3f_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction1DVec3f___call__(self, *args)
    def setIntegrationType(self, *args): return _Freestyle.UnaryFunction1DVec3f_setIntegrationType(self, *args)
    def getIntegrationType(self): return _Freestyle.UnaryFunction1DVec3f_getIntegrationType(self)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryFunction1DVec3f(self)
        return weakref_proxy(self)
UnaryFunction1DVec3f_swigregister = _Freestyle.UnaryFunction1DVec3f_swigregister
UnaryFunction1DVec3f_swigregister(UnaryFunction1DVec3f)

class UnaryFunction1DVectorViewShape(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryFunction1DVectorViewShape, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryFunction1DVectorViewShape, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_UnaryFunction1DVectorViewShape(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryFunction1DVectorViewShape
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryFunction1DVectorViewShape_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryFunction1DVectorViewShape___call__(self, *args)
    def setIntegrationType(self, *args): return _Freestyle.UnaryFunction1DVectorViewShape_setIntegrationType(self, *args)
    def getIntegrationType(self): return _Freestyle.UnaryFunction1DVectorViewShape_getIntegrationType(self)
UnaryFunction1DVectorViewShape_swigregister = _Freestyle.UnaryFunction1DVectorViewShape_swigregister
UnaryFunction1DVectorViewShape_swigregister(UnaryFunction1DVectorViewShape)

class GetXF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetXF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetXF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetXF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetXF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetXF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetXF1D
    __del__ = lambda self : None;
GetXF1D_swigregister = _Freestyle.GetXF1D_swigregister
GetXF1D_swigregister(GetXF1D)

class GetYF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetYF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetYF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetYF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetYF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetYF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetYF1D
    __del__ = lambda self : None;
GetYF1D_swigregister = _Freestyle.GetYF1D_swigregister
GetYF1D_swigregister(GetYF1D)

class GetZF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetZF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetZF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetZF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetZF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetZF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetZF1D
    __del__ = lambda self : None;
GetZF1D_swigregister = _Freestyle.GetZF1D_swigregister
GetZF1D_swigregister(GetZF1D)

class GetProjectedXF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedXF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedXF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedXF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetProjectedXF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetProjectedXF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetProjectedXF1D
    __del__ = lambda self : None;
GetProjectedXF1D_swigregister = _Freestyle.GetProjectedXF1D_swigregister
GetProjectedXF1D_swigregister(GetProjectedXF1D)

class GetProjectedYF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedYF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedYF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedYF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetProjectedYF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetProjectedYF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetProjectedYF1D
    __del__ = lambda self : None;
GetProjectedYF1D_swigregister = _Freestyle.GetProjectedYF1D_swigregister
GetProjectedYF1D_swigregister(GetProjectedYF1D)

class GetProjectedZF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetProjectedZF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetProjectedZF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetProjectedZF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetProjectedZF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetProjectedZF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetProjectedZF1D
    __del__ = lambda self : None;
GetProjectedZF1D_swigregister = _Freestyle.GetProjectedZF1D_swigregister
GetProjectedZF1D_swigregister(GetProjectedZF1D)

class Orientation2DF1D(UnaryFunction1DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Orientation2DF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Orientation2DF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Orientation2DF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.Orientation2DF1D_getName(self)
    def __call__(self, *args): return _Freestyle.Orientation2DF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Orientation2DF1D
    __del__ = lambda self : None;
Orientation2DF1D_swigregister = _Freestyle.Orientation2DF1D_swigregister
Orientation2DF1D_swigregister(Orientation2DF1D)

class Orientation3DF1D(UnaryFunction1DVec3f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVec3f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Orientation3DF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVec3f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Orientation3DF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Orientation3DF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.Orientation3DF1D_getName(self)
    def __call__(self, *args): return _Freestyle.Orientation3DF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Orientation3DF1D
    __del__ = lambda self : None;
Orientation3DF1D_swigregister = _Freestyle.Orientation3DF1D_swigregister
Orientation3DF1D_swigregister(Orientation3DF1D)

class ZDiscontinuityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZDiscontinuityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZDiscontinuityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ZDiscontinuityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.ZDiscontinuityF1D_getName(self)
    def __call__(self, *args): return _Freestyle.ZDiscontinuityF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_ZDiscontinuityF1D
    __del__ = lambda self : None;
ZDiscontinuityF1D_swigregister = _Freestyle.ZDiscontinuityF1D_swigregister
ZDiscontinuityF1D_swigregister(ZDiscontinuityF1D)

class QuantitativeInvisibilityF1D(UnaryFunction1DUnsigned):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DUnsigned]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantitativeInvisibilityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DUnsigned]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantitativeInvisibilityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_QuantitativeInvisibilityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.QuantitativeInvisibilityF1D_getName(self)
    def __call__(self, *args): return _Freestyle.QuantitativeInvisibilityF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_QuantitativeInvisibilityF1D
    __del__ = lambda self : None;
QuantitativeInvisibilityF1D_swigregister = _Freestyle.QuantitativeInvisibilityF1D_swigregister
QuantitativeInvisibilityF1D_swigregister(QuantitativeInvisibilityF1D)

class CurveNatureF1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurveNatureF1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CurveNatureF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_CurveNatureF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.CurveNatureF1D_getName(self)
    def __call__(self, *args): return _Freestyle.CurveNatureF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_CurveNatureF1D
    __del__ = lambda self : None;
CurveNatureF1D_swigregister = _Freestyle.CurveNatureF1D_swigregister
CurveNatureF1D_swigregister(CurveNatureF1D)

class TimeStampF1D(UnaryFunction1DVoid):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeStampF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TimeStampF1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.TimeStampF1D_getName(self)
    def __call__(self, *args): return _Freestyle.TimeStampF1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_TimeStampF1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_TimeStampF1D
    __del__ = lambda self : None;
TimeStampF1D_swigregister = _Freestyle.TimeStampF1D_swigregister
TimeStampF1D_swigregister(TimeStampF1D)

class IncrementChainingTimeStampF1D(UnaryFunction1DVoid):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncrementChainingTimeStampF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncrementChainingTimeStampF1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.IncrementChainingTimeStampF1D_getName(self)
    def __call__(self, *args): return _Freestyle.IncrementChainingTimeStampF1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_IncrementChainingTimeStampF1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_IncrementChainingTimeStampF1D
    __del__ = lambda self : None;
IncrementChainingTimeStampF1D_swigregister = _Freestyle.IncrementChainingTimeStampF1D_swigregister
IncrementChainingTimeStampF1D_swigregister(IncrementChainingTimeStampF1D)

class ChainingTimeStampF1D(UnaryFunction1DVoid):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainingTimeStampF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVoid]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainingTimeStampF1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.ChainingTimeStampF1D_getName(self)
    def __call__(self, *args): return _Freestyle.ChainingTimeStampF1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_ChainingTimeStampF1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ChainingTimeStampF1D
    __del__ = lambda self : None;
ChainingTimeStampF1D_swigregister = _Freestyle.ChainingTimeStampF1D_swigregister
ChainingTimeStampF1D_swigregister(ChainingTimeStampF1D)

class Curvature2DAngleF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curvature2DAngleF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curvature2DAngleF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Curvature2DAngleF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.Curvature2DAngleF1D_getName(self)
    def __call__(self, *args): return _Freestyle.Curvature2DAngleF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Curvature2DAngleF1D
    __del__ = lambda self : None;
Curvature2DAngleF1D_swigregister = _Freestyle.Curvature2DAngleF1D_swigregister
Curvature2DAngleF1D_swigregister(Curvature2DAngleF1D)

class Normal2DF1D(UnaryFunction1DVec2f):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVec2f]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Normal2DF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVec2f]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Normal2DF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Normal2DF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.Normal2DF1D_getName(self)
    def __call__(self, *args): return _Freestyle.Normal2DF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_Normal2DF1D
    __del__ = lambda self : None;
Normal2DF1D_swigregister = _Freestyle.Normal2DF1D_swigregister
Normal2DF1D_swigregister(Normal2DF1D)

class GetShapeF1D(UnaryFunction1DVectorViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetShapeF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetShapeF1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_GetShapeF1D()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetShapeF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetShapeF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetShapeF1D
    __del__ = lambda self : None;
GetShapeF1D_swigregister = _Freestyle.GetShapeF1D_swigregister
GetShapeF1D_swigregister(GetShapeF1D)

class GetOccludersF1D(UnaryFunction1DVectorViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetOccludersF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetOccludersF1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_GetOccludersF1D()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetOccludersF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetOccludersF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetOccludersF1D
    __del__ = lambda self : None;
GetOccludersF1D_swigregister = _Freestyle.GetOccludersF1D_swigregister
GetOccludersF1D_swigregister(GetOccludersF1D)

class GetOccludeeF1D(UnaryFunction1DVectorViewShape):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetOccludeeF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DVectorViewShape]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetOccludeeF1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_GetOccludeeF1D()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetOccludeeF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetOccludeeF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetOccludeeF1D
    __del__ = lambda self : None;
GetOccludeeF1D_swigregister = _Freestyle.GetOccludeeF1D_swigregister
GetOccludeeF1D_swigregister(GetOccludeeF1D)

class Module(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    __repr__ = _swig_repr
    __swig_getmethods__["setAlwaysRefresh"] = lambda x: _Freestyle.Module_setAlwaysRefresh
    if _newclass:setAlwaysRefresh = staticmethod(_Freestyle.Module_setAlwaysRefresh)
    __swig_getmethods__["setCausal"] = lambda x: _Freestyle.Module_setCausal
    if _newclass:setCausal = staticmethod(_Freestyle.Module_setCausal)
    __swig_getmethods__["setDrawable"] = lambda x: _Freestyle.Module_setDrawable
    if _newclass:setDrawable = staticmethod(_Freestyle.Module_setDrawable)
    __swig_getmethods__["getAlwaysRefresh"] = lambda x: _Freestyle.Module_getAlwaysRefresh
    if _newclass:getAlwaysRefresh = staticmethod(_Freestyle.Module_getAlwaysRefresh)
    __swig_getmethods__["getCausal"] = lambda x: _Freestyle.Module_getCausal
    if _newclass:getCausal = staticmethod(_Freestyle.Module_getCausal)
    __swig_getmethods__["getDrawable"] = lambda x: _Freestyle.Module_getDrawable
    if _newclass:getDrawable = staticmethod(_Freestyle.Module_getDrawable)
    def __init__(self): 
        this = _Freestyle.new_Module()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Module
    __del__ = lambda self : None;
Module_swigregister = _Freestyle.Module_swigregister
Module_swigregister(Module)

def Module_setAlwaysRefresh(b=True):
  return _Freestyle.Module_setAlwaysRefresh(b)
Module_setAlwaysRefresh = _Freestyle.Module_setAlwaysRefresh

def Module_setCausal(b=True):
  return _Freestyle.Module_setCausal(b)
Module_setCausal = _Freestyle.Module_setCausal

def Module_setDrawable(b=True):
  return _Freestyle.Module_setDrawable(b)
Module_setDrawable = _Freestyle.Module_setDrawable

def Module_getAlwaysRefresh():
  return _Freestyle.Module_getAlwaysRefresh()
Module_getAlwaysRefresh = _Freestyle.Module_getAlwaysRefresh

def Module_getCausal():
  return _Freestyle.Module_getCausal()
Module_getCausal = _Freestyle.Module_getCausal

def Module_getDrawable():
  return _Freestyle.Module_getDrawable()
Module_getDrawable = _Freestyle.Module_getDrawable

class DensityF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityF0D, name)
    __repr__ = _swig_repr
    def __init__(self, sigma=2): 
        this = _Freestyle.new_DensityF0D(sigma)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.DensityF0D_getName(self)
    def __call__(self, *args): return _Freestyle.DensityF0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_DensityF0D
    __del__ = lambda self : None;
DensityF0D_swigregister = _Freestyle.DensityF0D_swigregister
DensityF0D_swigregister(DensityF0D)

class LocalAverageDepthF0D(UnaryFunction0DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalAverageDepthF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalAverageDepthF0D, name)
    __repr__ = _swig_repr
    def __init__(self, maskSize=5.): 
        this = _Freestyle.new_LocalAverageDepthF0D(maskSize)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.LocalAverageDepthF0D_getName(self)
    def __call__(self, *args): return _Freestyle.LocalAverageDepthF0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_LocalAverageDepthF0D
    __del__ = lambda self : None;
LocalAverageDepthF0D_swigregister = _Freestyle.LocalAverageDepthF0D_swigregister
LocalAverageDepthF0D_swigregister(LocalAverageDepthF0D)

class ReadMapPixelF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadMapPixelF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadMapPixelF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ReadMapPixelF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.ReadMapPixelF0D_getName(self)
    def __call__(self, *args): return _Freestyle.ReadMapPixelF0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_ReadMapPixelF0D
    __del__ = lambda self : None;
ReadMapPixelF0D_swigregister = _Freestyle.ReadMapPixelF0D_swigregister
ReadMapPixelF0D_swigregister(ReadMapPixelF0D)

class ReadSteerableViewMapPixelF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadSteerableViewMapPixelF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadSteerableViewMapPixelF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ReadSteerableViewMapPixelF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.ReadSteerableViewMapPixelF0D_getName(self)
    def __call__(self, *args): return _Freestyle.ReadSteerableViewMapPixelF0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_ReadSteerableViewMapPixelF0D
    __del__ = lambda self : None;
ReadSteerableViewMapPixelF0D_swigregister = _Freestyle.ReadSteerableViewMapPixelF0D_swigregister
ReadSteerableViewMapPixelF0D_swigregister(ReadSteerableViewMapPixelF0D)

class ReadCompleteViewMapPixelF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReadCompleteViewMapPixelF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ReadCompleteViewMapPixelF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ReadCompleteViewMapPixelF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.ReadCompleteViewMapPixelF0D_getName(self)
    def __call__(self, *args): return _Freestyle.ReadCompleteViewMapPixelF0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_ReadCompleteViewMapPixelF0D
    __del__ = lambda self : None;
ReadCompleteViewMapPixelF0D_swigregister = _Freestyle.ReadCompleteViewMapPixelF0D_swigregister
ReadCompleteViewMapPixelF0D_swigregister(ReadCompleteViewMapPixelF0D)

class GetViewMapGradientNormF0D(UnaryFunction0DFloat):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetViewMapGradientNormF0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction0DFloat]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetViewMapGradientNormF0D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetViewMapGradientNormF0D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetViewMapGradientNormF0D_getName(self)
    def __call__(self, *args): return _Freestyle.GetViewMapGradientNormF0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetViewMapGradientNormF0D
    __del__ = lambda self : None;
GetViewMapGradientNormF0D_swigregister = _Freestyle.GetViewMapGradientNormF0D_swigregister
GetViewMapGradientNormF0D_swigregister(GetViewMapGradientNormF0D)

class DensityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_DensityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_DensityF1D
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.DensityF1D_getName(self)
    def __call__(self, *args): return _Freestyle.DensityF1D___call__(self, *args)
DensityF1D_swigregister = _Freestyle.DensityF1D_swigregister
DensityF1D_swigregister(DensityF1D)

class LocalAverageDepthF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalAverageDepthF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalAverageDepthF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_LocalAverageDepthF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.LocalAverageDepthF1D_getName(self)
    def __call__(self, *args): return _Freestyle.LocalAverageDepthF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_LocalAverageDepthF1D
    __del__ = lambda self : None;
LocalAverageDepthF1D_swigregister = _Freestyle.LocalAverageDepthF1D_swigregister
LocalAverageDepthF1D_swigregister(LocalAverageDepthF1D)

class GetCompleteViewMapDensityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetCompleteViewMapDensityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetCompleteViewMapDensityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetCompleteViewMapDensityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetCompleteViewMapDensityF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetCompleteViewMapDensityF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetCompleteViewMapDensityF1D
    __del__ = lambda self : None;
GetCompleteViewMapDensityF1D_swigregister = _Freestyle.GetCompleteViewMapDensityF1D_swigregister
GetCompleteViewMapDensityF1D_swigregister(GetCompleteViewMapDensityF1D)

class GetDirectionalViewMapDensityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetDirectionalViewMapDensityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetDirectionalViewMapDensityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetDirectionalViewMapDensityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetDirectionalViewMapDensityF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetDirectionalViewMapDensityF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetDirectionalViewMapDensityF1D
    __del__ = lambda self : None;
GetDirectionalViewMapDensityF1D_swigregister = _Freestyle.GetDirectionalViewMapDensityF1D_swigregister
GetDirectionalViewMapDensityF1D_swigregister(GetDirectionalViewMapDensityF1D)

class GetSteerableViewMapDensityF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetSteerableViewMapDensityF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetSteerableViewMapDensityF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetSteerableViewMapDensityF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_GetSteerableViewMapDensityF1D
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.GetSteerableViewMapDensityF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetSteerableViewMapDensityF1D___call__(self, *args)
GetSteerableViewMapDensityF1D_swigregister = _Freestyle.GetSteerableViewMapDensityF1D_swigregister
GetSteerableViewMapDensityF1D_swigregister(GetSteerableViewMapDensityF1D)

class GetViewMapGradientNormF1D(UnaryFunction1DDouble):
    __swig_setmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GetViewMapGradientNormF1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryFunction1DDouble]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GetViewMapGradientNormF1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GetViewMapGradientNormF1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.GetViewMapGradientNormF1D_getName(self)
    def __call__(self, *args): return _Freestyle.GetViewMapGradientNormF1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_GetViewMapGradientNormF1D
    __del__ = lambda self : None;
GetViewMapGradientNormF1D_swigregister = _Freestyle.GetViewMapGradientNormF1D_swigregister
GetViewMapGradientNormF1D_swigregister(GetViewMapGradientNormF1D)


def GetTimeStampCF():
  return _Freestyle.GetTimeStampCF()
GetTimeStampCF = _Freestyle.GetTimeStampCF

def GetCanvasWidthCF():
  return _Freestyle.GetCanvasWidthCF()
GetCanvasWidthCF = _Freestyle.GetCanvasWidthCF

def GetCanvasHeightCF():
  return _Freestyle.GetCanvasHeightCF()
GetCanvasHeightCF = _Freestyle.GetCanvasHeightCF

def LoadMapCF(*args):
  return _Freestyle.LoadMapCF(*args)
LoadMapCF = _Freestyle.LoadMapCF

def ReadMapPixelCF(*args):
  return _Freestyle.ReadMapPixelCF(*args)
ReadMapPixelCF = _Freestyle.ReadMapPixelCF

def ReadCompleteViewMapPixelCF(*args):
  return _Freestyle.ReadCompleteViewMapPixelCF(*args)
ReadCompleteViewMapPixelCF = _Freestyle.ReadCompleteViewMapPixelCF

def ReadDirectionalViewMapPixelCF(*args):
  return _Freestyle.ReadDirectionalViewMapPixelCF(*args)
ReadDirectionalViewMapPixelCF = _Freestyle.ReadDirectionalViewMapPixelCF

def GetSelectedFEdgeCF():
  return _Freestyle.GetSelectedFEdgeCF()
GetSelectedFEdgeCF = _Freestyle.GetSelectedFEdgeCF
class AdjacencyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdjacencyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdjacencyIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_AdjacencyIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_AdjacencyIterator
    __del__ = lambda self : None;
    def isEnd(self): return _Freestyle.AdjacencyIterator_isEnd(self)
    def isBegin(self): return _Freestyle.AdjacencyIterator_isBegin(self)
    def isIncoming(self): return _Freestyle.AdjacencyIterator_isIncoming(self)
    def getObject(self): return _Freestyle.AdjacencyIterator_getObject(self)
    def __deref__(self): return _Freestyle.AdjacencyIterator___deref__(self)
    def nextObject(self, *args): return _Freestyle.AdjacencyIterator_nextObject(self, *args)
    def increment(self): return _Freestyle.AdjacencyIterator_increment(self)
    def getExactTypeName(self): return _Freestyle.AdjacencyIterator_getExactTypeName(self)
    def getId(self): return _Freestyle.AdjacencyIterator_getId(self)
    def getNature(self): return _Freestyle.AdjacencyIterator_getNature(self)
    __swig_setmethods__["userdata"] = _Freestyle.AdjacencyIterator_userdata_set
    __swig_getmethods__["userdata"] = _Freestyle.AdjacencyIterator_userdata_get
    if _newclass:userdata = _swig_property(_Freestyle.AdjacencyIterator_userdata_get, _Freestyle.AdjacencyIterator_userdata_set)
    def A(self): return _Freestyle.AdjacencyIterator_A(self)
    def B(self): return _Freestyle.AdjacencyIterator_B(self)
    def fedgeA(self): return _Freestyle.AdjacencyIterator_fedgeA(self)
    def fedgeB(self): return _Freestyle.AdjacencyIterator_fedgeB(self)
    def viewShape(self): return _Freestyle.AdjacencyIterator_viewShape(self)
    def aShape(self, *args): return _Freestyle.AdjacencyIterator_aShape(self, *args)
    def isClosed(self): return _Freestyle.AdjacencyIterator_isClosed(self)
    def getChainingTimeStamp(self): return _Freestyle.AdjacencyIterator_getChainingTimeStamp(self)
    def bShape(self): return _Freestyle.AdjacencyIterator_bShape(self)
    def occluders(self): return _Freestyle.AdjacencyIterator_occluders(self)
    def splittingId(self): return _Freestyle.AdjacencyIterator_splittingId(self)
    def SetA(self, *args): return _Freestyle.AdjacencyIterator_SetA(self, *args)
    def SetB(self, *args): return _Freestyle.AdjacencyIterator_SetB(self, *args)
    def SetNature(self, *args): return _Freestyle.AdjacencyIterator_SetNature(self, *args)
    def SetFEdgeA(self, *args): return _Freestyle.AdjacencyIterator_SetFEdgeA(self, *args)
    def SetFEdgeB(self, *args): return _Freestyle.AdjacencyIterator_SetFEdgeB(self, *args)
    def SetShape(self, *args): return _Freestyle.AdjacencyIterator_SetShape(self, *args)
    def SetId(self, *args): return _Freestyle.AdjacencyIterator_SetId(self, *args)
    def UpdateFEdges(self): return _Freestyle.AdjacencyIterator_UpdateFEdges(self)
    def SetaShape(self, *args): return _Freestyle.AdjacencyIterator_SetaShape(self, *args)
    def SetQI(self, *args): return _Freestyle.AdjacencyIterator_SetQI(self, *args)
    def setChainingTimeStamp(self, *args): return _Freestyle.AdjacencyIterator_setChainingTimeStamp(self, *args)
    def AddOccluder(self, *args): return _Freestyle.AdjacencyIterator_AddOccluder(self, *args)
    def setSplittingId(self, *args): return _Freestyle.AdjacencyIterator_setSplittingId(self, *args)
    def MarkInconsistent(self, v=True): return _Freestyle.AdjacencyIterator_MarkInconsistent(self, v)
    def MarkAmbiguous(self, v=True): return _Freestyle.AdjacencyIterator_MarkAmbiguous(self, v)
    def FixAmbiguous(self): return _Freestyle.AdjacencyIterator_FixAmbiguous(self)
    __swig_setmethods__["visVotes"] = _Freestyle.AdjacencyIterator_visVotes_set
    __swig_getmethods__["visVotes"] = _Freestyle.AdjacencyIterator_visVotes_get
    if _newclass:visVotes = _swig_property(_Freestyle.AdjacencyIterator_visVotes_get, _Freestyle.AdjacencyIterator_visVotes_set)
    __swig_setmethods__["invisVotes"] = _Freestyle.AdjacencyIterator_invisVotes_set
    __swig_getmethods__["invisVotes"] = _Freestyle.AdjacencyIterator_invisVotes_get
    if _newclass:invisVotes = _swig_property(_Freestyle.AdjacencyIterator_invisVotes_get, _Freestyle.AdjacencyIterator_invisVotes_set)
    def colorID(self): return _Freestyle.AdjacencyIterator_colorID(self)
    def intersect_2d_area(self, *args): return _Freestyle.AdjacencyIterator_intersect_2d_area(self, *args)
    def include_in_2d_area(self, *args): return _Freestyle.AdjacencyIterator_include_in_2d_area(self, *args)
    def getLength2D(self): return _Freestyle.AdjacencyIterator_getLength2D(self)
    def qi(self): return _Freestyle.AdjacencyIterator_qi(self)
    def occluders_begin(self): return _Freestyle.AdjacencyIterator_occluders_begin(self)
    def occluders_end(self): return _Freestyle.AdjacencyIterator_occluders_end(self)
    def occluders_size(self): return _Freestyle.AdjacencyIterator_occluders_size(self)
    def occluders_empty(self): return _Freestyle.AdjacencyIterator_occluders_empty(self)
    def occludee(self): return _Freestyle.AdjacencyIterator_occludee(self)
    def occluded_shape(self): return _Freestyle.AdjacencyIterator_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.AdjacencyIterator_occludee_empty(self)
    def shape_id(self): return _Freestyle.AdjacencyIterator_shape_id(self)
    def shape(self): return _Freestyle.AdjacencyIterator_shape(self)
    def shape_importance(self): return _Freestyle.AdjacencyIterator_shape_importance(self)
    def inconsistentVisibility(self): return _Freestyle.AdjacencyIterator_inconsistentVisibility(self)
    def ambiguousVisibility(self): return _Freestyle.AdjacencyIterator_ambiguousVisibility(self)
    def wasAmbiguous(self): return _Freestyle.AdjacencyIterator_wasAmbiguous(self)
    def verticesBegin(self): return _Freestyle.AdjacencyIterator_verticesBegin(self)
    def verticesEnd(self): return _Freestyle.AdjacencyIterator_verticesEnd(self)
    def pointsBegin(self, t=0.): return _Freestyle.AdjacencyIterator_pointsBegin(self, t)
    def pointsEnd(self, t=0.): return _Freestyle.AdjacencyIterator_pointsEnd(self, t)
    def printRefStats(self): return _Freestyle.AdjacencyIterator_printRefStats(self)
    def eraseAllI1Ds(self): return _Freestyle.AdjacencyIterator_eraseAllI1Ds(self)
    def getTimeStamp(self): return _Freestyle.AdjacencyIterator_getTimeStamp(self)
    def setTimeStamp(self, *args): return _Freestyle.AdjacencyIterator_setTimeStamp(self, *args)
AdjacencyIterator_swigregister = _Freestyle.AdjacencyIterator_swigregister
AdjacencyIterator_swigregister(AdjacencyIterator)

class ChainingIterator(ViewEdgeViewEdgeIterator):
    __swig_setmethods__ = {}
    for _s in [ViewEdgeViewEdgeIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainingIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [ViewEdgeViewEdgeIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainingIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ChainingIterator:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_ChainingIterator(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ChainingIterator
    __del__ = lambda self : None;
    def getExactTypeName(self): return _Freestyle.ChainingIterator_getExactTypeName(self)
    def init(self): return _Freestyle.ChainingIterator_init(self)
    def traverse(self, *args): return _Freestyle.ChainingIterator_traverse(self, *args)
    def getVertex(self): return _Freestyle.ChainingIterator_getVertex(self)
    def isIncrementing(self): return _Freestyle.ChainingIterator_isIncrementing(self)
    def increment(self): return _Freestyle.ChainingIterator_increment(self)
    def decrement(self): return _Freestyle.ChainingIterator_decrement(self)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_ChainingIterator(self)
        return weakref_proxy(self)
ChainingIterator_swigregister = _Freestyle.ChainingIterator_swigregister
ChainingIterator_swigregister(ChainingIterator)

class ChainSilhouetteIterator(ChainingIterator):
    __swig_setmethods__ = {}
    for _s in [ChainingIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainSilhouetteIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainingIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainSilhouetteIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ChainSilhouetteIterator:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_ChainSilhouetteIterator(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    def getExactTypeName(self): return _Freestyle.ChainSilhouetteIterator_getExactTypeName(self)
    def traverse(self, *args): return _Freestyle.ChainSilhouetteIterator_traverse(self, *args)
    __swig_destroy__ = _Freestyle.delete_ChainSilhouetteIterator
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_ChainSilhouetteIterator(self)
        return weakref_proxy(self)
ChainSilhouetteIterator_swigregister = _Freestyle.ChainSilhouetteIterator_swigregister
ChainSilhouetteIterator_swigregister(ChainSilhouetteIterator)

class ChainPredicateIterator(ChainingIterator):
    __swig_setmethods__ = {}
    for _s in [ChainingIterator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainPredicateIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [ChainingIterator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChainPredicateIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ChainPredicateIterator:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_ChainPredicateIterator(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ChainPredicateIterator
    __del__ = lambda self : None;
    def getExactTypeName(self): return _Freestyle.ChainPredicateIterator_getExactTypeName(self)
    def traverse(self, *args): return _Freestyle.ChainPredicateIterator_traverse(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_ChainPredicateIterator(self)
        return weakref_proxy(self)
ChainPredicateIterator_swigregister = _Freestyle.ChainPredicateIterator_swigregister
ChainPredicateIterator_swigregister(ChainPredicateIterator)

class UnaryPredicate0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryPredicate0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryPredicate0D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryPredicate0D:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryPredicate0D(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryPredicate0D
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryPredicate0D_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryPredicate0D___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryPredicate0D(self)
        return weakref_proxy(self)
UnaryPredicate0D_swigregister = _Freestyle.UnaryPredicate0D_swigregister
UnaryPredicate0D_swigregister(UnaryPredicate0D)

class BinaryPredicate0D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryPredicate0D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryPredicate0D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_BinaryPredicate0D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_BinaryPredicate0D
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.BinaryPredicate0D_getName(self)
    def __call__(self, *args): return _Freestyle.BinaryPredicate0D___call__(self, *args)
BinaryPredicate0D_swigregister = _Freestyle.BinaryPredicate0D_swigregister
BinaryPredicate0D_swigregister(BinaryPredicate0D)

class TrueUP0D(UnaryPredicate0D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrueUP0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrueUP0D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_TrueUP0D()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.TrueUP0D_getName(self)
    def __call__(self, *args): return _Freestyle.TrueUP0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_TrueUP0D
    __del__ = lambda self : None;
TrueUP0D_swigregister = _Freestyle.TrueUP0D_swigregister
TrueUP0D_swigregister(TrueUP0D)

class FalseUP0D(UnaryPredicate0D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FalseUP0D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FalseUP0D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_FalseUP0D()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.FalseUP0D_getName(self)
    def __call__(self, *args): return _Freestyle.FalseUP0D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_FalseUP0D
    __del__ = lambda self : None;
FalseUP0D_swigregister = _Freestyle.FalseUP0D_swigregister
FalseUP0D_swigregister(FalseUP0D)

class UnaryPredicate1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnaryPredicate1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnaryPredicate1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == UnaryPredicate1D:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_UnaryPredicate1D(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_UnaryPredicate1D
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.UnaryPredicate1D_getName(self)
    def __call__(self, *args): return _Freestyle.UnaryPredicate1D___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_UnaryPredicate1D(self)
        return weakref_proxy(self)
UnaryPredicate1D_swigregister = _Freestyle.UnaryPredicate1D_swigregister
UnaryPredicate1D_swigregister(UnaryPredicate1D)

class BinaryPredicate1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryPredicate1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryPredicate1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == BinaryPredicate1D:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_BinaryPredicate1D(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_BinaryPredicate1D
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.BinaryPredicate1D_getName(self)
    def __call__(self, *args): return _Freestyle.BinaryPredicate1D___call__(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_BinaryPredicate1D(self)
        return weakref_proxy(self)
BinaryPredicate1D_swigregister = _Freestyle.BinaryPredicate1D_swigregister
BinaryPredicate1D_swigregister(BinaryPredicate1D)

class TrueUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrueUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrueUP1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_TrueUP1D()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.TrueUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.TrueUP1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_TrueUP1D
    __del__ = lambda self : None;
TrueUP1D_swigregister = _Freestyle.TrueUP1D_swigregister
TrueUP1D_swigregister(TrueUP1D)

class FalseUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FalseUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FalseUP1D, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_FalseUP1D()
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.FalseUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.FalseUP1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_FalseUP1D
    __del__ = lambda self : None;
FalseUP1D_swigregister = _Freestyle.FalseUP1D_swigregister
FalseUP1D_swigregister(FalseUP1D)

class QuantitativeInvisibilityUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QuantitativeInvisibilityUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QuantitativeInvisibilityUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, qi=0): 
        this = _Freestyle.new_QuantitativeInvisibilityUP1D(qi)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.QuantitativeInvisibilityUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.QuantitativeInvisibilityUP1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_QuantitativeInvisibilityUP1D
    __del__ = lambda self : None;
QuantitativeInvisibilityUP1D_swigregister = _Freestyle.QuantitativeInvisibilityUP1D_swigregister
QuantitativeInvisibilityUP1D_swigregister(QuantitativeInvisibilityUP1D)

class ContourUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContourUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContourUP1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.ContourUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.ContourUP1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_ContourUP1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ContourUP1D
    __del__ = lambda self : None;
ContourUP1D_swigregister = _Freestyle.ContourUP1D_swigregister
ContourUP1D_swigregister(ContourUP1D)

class ExternalContourUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalContourUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalContourUP1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.ExternalContourUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.ExternalContourUP1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_ExternalContourUP1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ExternalContourUP1D
    __del__ = lambda self : None;
ExternalContourUP1D_swigregister = _Freestyle.ExternalContourUP1D_swigregister
ExternalContourUP1D_swigregister(ExternalContourUP1D)

class EqualToTimeStampUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EqualToTimeStampUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EqualToTimeStampUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_EqualToTimeStampUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.EqualToTimeStampUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.EqualToTimeStampUP1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_EqualToTimeStampUP1D
    __del__ = lambda self : None;
EqualToTimeStampUP1D_swigregister = _Freestyle.EqualToTimeStampUP1D_swigregister
EqualToTimeStampUP1D_swigregister(EqualToTimeStampUP1D)

class EqualToChainingTimeStampUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EqualToChainingTimeStampUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EqualToChainingTimeStampUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_EqualToChainingTimeStampUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.EqualToChainingTimeStampUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.EqualToChainingTimeStampUP1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_EqualToChainingTimeStampUP1D
    __del__ = lambda self : None;
EqualToChainingTimeStampUP1D_swigregister = _Freestyle.EqualToChainingTimeStampUP1D_swigregister
EqualToChainingTimeStampUP1D_swigregister(EqualToChainingTimeStampUP1D)

class ShapeUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapeUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShapeUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ShapeUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.ShapeUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.ShapeUP1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_ShapeUP1D
    __del__ = lambda self : None;
ShapeUP1D_swigregister = _Freestyle.ShapeUP1D_swigregister
ShapeUP1D_swigregister(ShapeUP1D)

class TrueBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrueBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TrueBP1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.TrueBP1D_getName(self)
    def __call__(self, *args): return _Freestyle.TrueBP1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_TrueBP1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_TrueBP1D
    __del__ = lambda self : None;
TrueBP1D_swigregister = _Freestyle.TrueBP1D_swigregister
TrueBP1D_swigregister(TrueBP1D)

class FalseBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FalseBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FalseBP1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.FalseBP1D_getName(self)
    def __call__(self, *args): return _Freestyle.FalseBP1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_FalseBP1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_FalseBP1D
    __del__ = lambda self : None;
FalseBP1D_swigregister = _Freestyle.FalseBP1D_swigregister
FalseBP1D_swigregister(FalseBP1D)

class Length2DBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Length2DBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Length2DBP1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.Length2DBP1D_getName(self)
    def __call__(self, *args): return _Freestyle.Length2DBP1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_Length2DBP1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Length2DBP1D
    __del__ = lambda self : None;
Length2DBP1D_swigregister = _Freestyle.Length2DBP1D_swigregister
Length2DBP1D_swigregister(Length2DBP1D)

class SameShapeIdBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SameShapeIdBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SameShapeIdBP1D, name)
    __repr__ = _swig_repr
    def getName(self): return _Freestyle.SameShapeIdBP1D_getName(self)
    def __call__(self, *args): return _Freestyle.SameShapeIdBP1D___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_SameShapeIdBP1D()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_SameShapeIdBP1D
    __del__ = lambda self : None;
SameShapeIdBP1D_swigregister = _Freestyle.SameShapeIdBP1D_swigregister
SameShapeIdBP1D_swigregister(SameShapeIdBP1D)

class ViewMapGradientNormBP1D(BinaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ViewMapGradientNormBP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ViewMapGradientNormBP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ViewMapGradientNormBP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.ViewMapGradientNormBP1D_getName(self)
    def __call__(self, *args): return _Freestyle.ViewMapGradientNormBP1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_ViewMapGradientNormBP1D
    __del__ = lambda self : None;
ViewMapGradientNormBP1D_swigregister = _Freestyle.ViewMapGradientNormBP1D_swigregister
ViewMapGradientNormBP1D_swigregister(ViewMapGradientNormBP1D)

class DensityLowerThanUP1D(UnaryPredicate1D):
    __swig_setmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DensityLowerThanUP1D, name, value)
    __swig_getmethods__ = {}
    for _s in [UnaryPredicate1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DensityLowerThanUP1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_DensityLowerThanUP1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.DensityLowerThanUP1D_getName(self)
    def __call__(self, *args): return _Freestyle.DensityLowerThanUP1D___call__(self, *args)
    __swig_destroy__ = _Freestyle.delete_DensityLowerThanUP1D
    __del__ = lambda self : None;
DensityLowerThanUP1D_swigregister = _Freestyle.DensityLowerThanUP1D_swigregister
DensityLowerThanUP1D_swigregister(DensityLowerThanUP1D)

class CurvePointIterator(Interface0DIteratorNested):
    __swig_setmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurvePointIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurvePointIterator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_CurvilinearLength"] = _Freestyle.CurvePointIterator__CurvilinearLength_set
    __swig_getmethods__["_CurvilinearLength"] = _Freestyle.CurvePointIterator__CurvilinearLength_get
    if _newclass:_CurvilinearLength = _swig_property(_Freestyle.CurvePointIterator__CurvilinearLength_get, _Freestyle.CurvePointIterator__CurvilinearLength_set)
    __swig_setmethods__["_step"] = _Freestyle.CurvePointIterator__step_set
    __swig_getmethods__["_step"] = _Freestyle.CurvePointIterator__step_get
    if _newclass:_step = _swig_property(_Freestyle.CurvePointIterator__step_get, _Freestyle.CurvePointIterator__step_set)
    __swig_setmethods__["__A"] = _Freestyle.CurvePointIterator___A_set
    __swig_getmethods__["__A"] = _Freestyle.CurvePointIterator___A_get
    if _newclass:__A = _swig_property(_Freestyle.CurvePointIterator___A_get, _Freestyle.CurvePointIterator___A_set)
    __swig_setmethods__["__B"] = _Freestyle.CurvePointIterator___B_set
    __swig_getmethods__["__B"] = _Freestyle.CurvePointIterator___B_get
    if _newclass:__B = _swig_property(_Freestyle.CurvePointIterator___B_get, _Freestyle.CurvePointIterator___B_set)
    __swig_setmethods__["_begin"] = _Freestyle.CurvePointIterator__begin_set
    __swig_getmethods__["_begin"] = _Freestyle.CurvePointIterator__begin_get
    if _newclass:_begin = _swig_property(_Freestyle.CurvePointIterator__begin_get, _Freestyle.CurvePointIterator__begin_set)
    __swig_setmethods__["_end"] = _Freestyle.CurvePointIterator__end_set
    __swig_getmethods__["_end"] = _Freestyle.CurvePointIterator__end_get
    if _newclass:_end = _swig_property(_Freestyle.CurvePointIterator__end_get, _Freestyle.CurvePointIterator__end_set)
    __swig_setmethods__["_n"] = _Freestyle.CurvePointIterator__n_set
    __swig_getmethods__["_n"] = _Freestyle.CurvePointIterator__n_get
    if _newclass:_n = _swig_property(_Freestyle.CurvePointIterator__n_get, _Freestyle.CurvePointIterator__n_set)
    __swig_setmethods__["_currentn"] = _Freestyle.CurvePointIterator__currentn_set
    __swig_getmethods__["_currentn"] = _Freestyle.CurvePointIterator__currentn_get
    if _newclass:_currentn = _swig_property(_Freestyle.CurvePointIterator__currentn_get, _Freestyle.CurvePointIterator__currentn_set)
    __swig_setmethods__["_t"] = _Freestyle.CurvePointIterator__t_set
    __swig_getmethods__["_t"] = _Freestyle.CurvePointIterator__t_get
    if _newclass:_t = _swig_property(_Freestyle.CurvePointIterator__t_get, _Freestyle.CurvePointIterator__t_set)
    __swig_setmethods__["_Point"] = _Freestyle.CurvePointIterator__Point_set
    __swig_getmethods__["_Point"] = _Freestyle.CurvePointIterator__Point_get
    if _newclass:_Point = _swig_property(_Freestyle.CurvePointIterator__Point_get, _Freestyle.CurvePointIterator__Point_set)
    __swig_setmethods__["_CurveLength"] = _Freestyle.CurvePointIterator__CurveLength_set
    __swig_getmethods__["_CurveLength"] = _Freestyle.CurvePointIterator__CurveLength_get
    if _newclass:_CurveLength = _swig_property(_Freestyle.CurvePointIterator__CurveLength_get, _Freestyle.CurvePointIterator__CurveLength_set)
    def __init__(self, *args): 
        this = _Freestyle.new_CurvePointIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_CurvePointIterator
    __del__ = lambda self : None;
    def copy(self): return _Freestyle.CurvePointIterator_copy(self)
    def CastToInterface0DIterator(self): return _Freestyle.CurvePointIterator_CastToInterface0DIterator(self)
    def getExactTypeName(self): return _Freestyle.CurvePointIterator_getExactTypeName(self)
    def __eq__(self, *args): return _Freestyle.CurvePointIterator___eq__(self, *args)
    def getObject(self): return _Freestyle.CurvePointIterator_getObject(self)
    def __deref__(self): return _Freestyle.CurvePointIterator___deref__(self)
    def isBegin(self): return _Freestyle.CurvePointIterator_isBegin(self)
    def isEnd(self): return _Freestyle.CurvePointIterator_isEnd(self)
    def getX(self): return _Freestyle.CurvePointIterator_getX(self)
    def getY(self): return _Freestyle.CurvePointIterator_getY(self)
    def getZ(self): return _Freestyle.CurvePointIterator_getZ(self)
    def getPoint3D(self): return _Freestyle.CurvePointIterator_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.CurvePointIterator_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.CurvePointIterator_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.CurvePointIterator_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.CurvePointIterator_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.CurvePointIterator_getFEdge(self, *args)
    def getId(self): return _Freestyle.CurvePointIterator_getId(self)
    def getNature(self): return _Freestyle.CurvePointIterator_getNature(self)
    def castToSVertex(self): return _Freestyle.CurvePointIterator_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.CurvePointIterator_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.CurvePointIterator_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.CurvePointIterator_castToTVertex(self)
    def A(self): return _Freestyle.CurvePointIterator_A(self)
    def B(self): return _Freestyle.CurvePointIterator_B(self)
    def t2d(self): return _Freestyle.CurvePointIterator_t2d(self)
    def SetA(self, *args): return _Freestyle.CurvePointIterator_SetA(self, *args)
    def SetB(self, *args): return _Freestyle.CurvePointIterator_SetB(self, *args)
    def SetT2d(self, *args): return _Freestyle.CurvePointIterator_SetT2d(self, *args)
    def fedge(self): return _Freestyle.CurvePointIterator_fedge(self)
    def point2d(self): return _Freestyle.CurvePointIterator_point2d(self)
    def point3d(self): return _Freestyle.CurvePointIterator_point3d(self)
    def normal(self): return _Freestyle.CurvePointIterator_normal(self)
    def shape(self): return _Freestyle.CurvePointIterator_shape(self)
    def occluders_begin(self): return _Freestyle.CurvePointIterator_occluders_begin(self)
    def occluders_end(self): return _Freestyle.CurvePointIterator_occluders_end(self)
    def occluders_empty(self): return _Freestyle.CurvePointIterator_occluders_empty(self)
    def occluders_size(self): return _Freestyle.CurvePointIterator_occluders_size(self)
    def occludee(self): return _Freestyle.CurvePointIterator_occludee(self)
    def occluded_shape(self): return _Freestyle.CurvePointIterator_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.CurvePointIterator_occludee_empty(self)
    def z_discontinuity(self): return _Freestyle.CurvePointIterator_z_discontinuity(self)
    def curvatureFredo(self): return _Freestyle.CurvePointIterator_curvatureFredo(self)
    def directionFredo(self): return _Freestyle.CurvePointIterator_directionFredo(self)
CurvePointIterator_swigregister = _Freestyle.CurvePointIterator_swigregister
CurvePointIterator_swigregister(CurvePointIterator)

class CurvePoint(Interface0D):
    __swig_setmethods__ = {}
    for _s in [Interface0D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CurvePoint, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CurvePoint, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.CurvePoint_getExactTypeName(self)
    def getX(self): return _Freestyle.CurvePoint_getX(self)
    def getY(self): return _Freestyle.CurvePoint_getY(self)
    def getZ(self): return _Freestyle.CurvePoint_getZ(self)
    def getPoint3D(self): return _Freestyle.CurvePoint_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.CurvePoint_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.CurvePoint_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.CurvePoint_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.CurvePoint_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.CurvePoint_getFEdge(self, *args)
    def getId(self): return _Freestyle.CurvePoint_getId(self)
    def getNature(self): return _Freestyle.CurvePoint_getNature(self)
    def castToSVertex(self): return _Freestyle.CurvePoint_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.CurvePoint_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.CurvePoint_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.CurvePoint_castToTVertex(self)
    def __init__(self, *args): 
        this = _Freestyle.new_CurvePoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_CurvePoint
    __del__ = lambda self : None;
    def __eq__(self, *args): return _Freestyle.CurvePoint___eq__(self, *args)
    def A(self): return _Freestyle.CurvePoint_A(self)
    def B(self): return _Freestyle.CurvePoint_B(self)
    def t2d(self): return _Freestyle.CurvePoint_t2d(self)
    def SetA(self, *args): return _Freestyle.CurvePoint_SetA(self, *args)
    def SetB(self, *args): return _Freestyle.CurvePoint_SetB(self, *args)
    def SetT2d(self, *args): return _Freestyle.CurvePoint_SetT2d(self, *args)
    def fedge(self): return _Freestyle.CurvePoint_fedge(self)
    def point2d(self): return _Freestyle.CurvePoint_point2d(self)
    def point3d(self): return _Freestyle.CurvePoint_point3d(self)
    def normal(self): return _Freestyle.CurvePoint_normal(self)
    def shape(self): return _Freestyle.CurvePoint_shape(self)
    def occluders_begin(self): return _Freestyle.CurvePoint_occluders_begin(self)
    def occluders_end(self): return _Freestyle.CurvePoint_occluders_end(self)
    def occluders_empty(self): return _Freestyle.CurvePoint_occluders_empty(self)
    def occluders_size(self): return _Freestyle.CurvePoint_occluders_size(self)
    def occludee(self): return _Freestyle.CurvePoint_occludee(self)
    def occluded_shape(self): return _Freestyle.CurvePoint_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.CurvePoint_occludee_empty(self)
    def z_discontinuity(self): return _Freestyle.CurvePoint_z_discontinuity(self)
    def curvatureFredo(self): return _Freestyle.CurvePoint_curvatureFredo(self)
    def directionFredo(self): return _Freestyle.CurvePoint_directionFredo(self)
CurvePoint_swigregister = _Freestyle.CurvePoint_swigregister
CurvePoint_swigregister(CurvePoint)

class Curve(Interface1D):
    __swig_setmethods__ = {}
    for _s in [Interface1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Curve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Curve
    __del__ = lambda self : None;
    def computeCurvatureAndOrientation(self): return _Freestyle.Curve_computeCurvatureAndOrientation(self)
    def push_vertex_back(self, *args): return _Freestyle.Curve_push_vertex_back(self, *args)
    def push_vertex_front(self, *args): return _Freestyle.Curve_push_vertex_front(self, *args)
    def empty(self): return _Freestyle.Curve_empty(self)
    def getLength2D(self): return _Freestyle.Curve_getLength2D(self)
    def getId(self): return _Freestyle.Curve_getId(self)
    def nSegments(self): return _Freestyle.Curve_nSegments(self)
    def setId(self, *args): return _Freestyle.Curve_setId(self, *args)
    def curvePointsBegin(self, t=0.): return _Freestyle.Curve_curvePointsBegin(self, t)
    def curvePointsEnd(self, t=0.): return _Freestyle.Curve_curvePointsEnd(self, t)
    def curveVerticesBegin(self): return _Freestyle.Curve_curveVerticesBegin(self)
    def curveVerticesEnd(self): return _Freestyle.Curve_curveVerticesEnd(self)
    def verticesBegin(self): return _Freestyle.Curve_verticesBegin(self)
    def verticesEnd(self): return _Freestyle.Curve_verticesEnd(self)
    def pointsBegin(self, t=0.): return _Freestyle.Curve_pointsBegin(self, t)
    def pointsEnd(self, t=0.): return _Freestyle.Curve_pointsEnd(self, t)
Curve_swigregister = _Freestyle.Curve_swigregister
Curve_swigregister(Curve)

class StrokeVertexIterator(Interface0DIteratorNested):
    __swig_setmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeVertexIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface0DIteratorNested]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeVertexIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_StrokeVertexIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_StrokeVertexIterator
    __del__ = lambda self : None;
    def castToInterface0DIterator(self): return _Freestyle.StrokeVertexIterator_castToInterface0DIterator(self)
    def getExactTypeName(self): return _Freestyle.StrokeVertexIterator_getExactTypeName(self)
    def getObject(self): return _Freestyle.StrokeVertexIterator_getObject(self)
    def __deref__(self): return _Freestyle.StrokeVertexIterator___deref__(self)
    def increment(self): return _Freestyle.StrokeVertexIterator_increment(self)
    def decrement(self): return _Freestyle.StrokeVertexIterator_decrement(self)
    def isBegin(self): return _Freestyle.StrokeVertexIterator_isBegin(self)
    def isEnd(self): return _Freestyle.StrokeVertexIterator_isEnd(self)
    def __eq__(self, *args): return _Freestyle.StrokeVertexIterator___eq__(self, *args)
    def t(self): return _Freestyle.StrokeVertexIterator_t(self)
    def u(self): return _Freestyle.StrokeVertexIterator_u(self)
    def copy(self): return _Freestyle.StrokeVertexIterator_copy(self)
    def getIt(self): return _Freestyle.StrokeVertexIterator_getIt(self)
    def x(self): return _Freestyle.StrokeVertexIterator_x(self)
    def y(self): return _Freestyle.StrokeVertexIterator_y(self)
    def z(self): return _Freestyle.StrokeVertexIterator_z(self)
    def getPoint(self): return _Freestyle.StrokeVertexIterator_getPoint(self)
    def attribute(self, *args): return _Freestyle.StrokeVertexIterator_attribute(self, *args)
    def curvilinearAbscissa(self): return _Freestyle.StrokeVertexIterator_curvilinearAbscissa(self)
    def strokeLength(self): return _Freestyle.StrokeVertexIterator_strokeLength(self)
    def SetX(self, *args): return _Freestyle.StrokeVertexIterator_SetX(self, *args)
    def SetY(self, *args): return _Freestyle.StrokeVertexIterator_SetY(self, *args)
    def SetPoint(self, *args): return _Freestyle.StrokeVertexIterator_SetPoint(self, *args)
    def SetAttribute(self, *args): return _Freestyle.StrokeVertexIterator_SetAttribute(self, *args)
    def SetCurvilinearAbscissa(self, *args): return _Freestyle.StrokeVertexIterator_SetCurvilinearAbscissa(self, *args)
    def SetStrokeLength(self, *args): return _Freestyle.StrokeVertexIterator_SetStrokeLength(self, *args)
    def getX(self): return _Freestyle.StrokeVertexIterator_getX(self)
    def getY(self): return _Freestyle.StrokeVertexIterator_getY(self)
    def getZ(self): return _Freestyle.StrokeVertexIterator_getZ(self)
    def getPoint3D(self): return _Freestyle.StrokeVertexIterator_getPoint3D(self)
    def getProjectedX(self): return _Freestyle.StrokeVertexIterator_getProjectedX(self)
    def getProjectedY(self): return _Freestyle.StrokeVertexIterator_getProjectedY(self)
    def getProjectedZ(self): return _Freestyle.StrokeVertexIterator_getProjectedZ(self)
    def getPoint2D(self): return _Freestyle.StrokeVertexIterator_getPoint2D(self)
    def getFEdge(self, *args): return _Freestyle.StrokeVertexIterator_getFEdge(self, *args)
    def getId(self): return _Freestyle.StrokeVertexIterator_getId(self)
    def getNature(self): return _Freestyle.StrokeVertexIterator_getNature(self)
    def castToSVertex(self): return _Freestyle.StrokeVertexIterator_castToSVertex(self)
    def castToViewVertex(self): return _Freestyle.StrokeVertexIterator_castToViewVertex(self)
    def castToNonTVertex(self): return _Freestyle.StrokeVertexIterator_castToNonTVertex(self)
    def castToTVertex(self): return _Freestyle.StrokeVertexIterator_castToTVertex(self)
    def A(self): return _Freestyle.StrokeVertexIterator_A(self)
    def B(self): return _Freestyle.StrokeVertexIterator_B(self)
    def t2d(self): return _Freestyle.StrokeVertexIterator_t2d(self)
    def SetA(self, *args): return _Freestyle.StrokeVertexIterator_SetA(self, *args)
    def SetB(self, *args): return _Freestyle.StrokeVertexIterator_SetB(self, *args)
    def SetT2d(self, *args): return _Freestyle.StrokeVertexIterator_SetT2d(self, *args)
    def fedge(self): return _Freestyle.StrokeVertexIterator_fedge(self)
    def point2d(self): return _Freestyle.StrokeVertexIterator_point2d(self)
    def point3d(self): return _Freestyle.StrokeVertexIterator_point3d(self)
    def normal(self): return _Freestyle.StrokeVertexIterator_normal(self)
    def shape(self): return _Freestyle.StrokeVertexIterator_shape(self)
    def occluders_begin(self): return _Freestyle.StrokeVertexIterator_occluders_begin(self)
    def occluders_end(self): return _Freestyle.StrokeVertexIterator_occluders_end(self)
    def occluders_empty(self): return _Freestyle.StrokeVertexIterator_occluders_empty(self)
    def occluders_size(self): return _Freestyle.StrokeVertexIterator_occluders_size(self)
    def occludee(self): return _Freestyle.StrokeVertexIterator_occludee(self)
    def occluded_shape(self): return _Freestyle.StrokeVertexIterator_occluded_shape(self)
    def occludee_empty(self): return _Freestyle.StrokeVertexIterator_occludee_empty(self)
    def z_discontinuity(self): return _Freestyle.StrokeVertexIterator_z_discontinuity(self)
    def curvatureFredo(self): return _Freestyle.StrokeVertexIterator_curvatureFredo(self)
    def directionFredo(self): return _Freestyle.StrokeVertexIterator_directionFredo(self)
StrokeVertexIterator_swigregister = _Freestyle.StrokeVertexIterator_swigregister
StrokeVertexIterator_swigregister(StrokeVertexIterator)

class StrokeAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeAttribute, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_StrokeAttribute(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_StrokeAttribute
    __del__ = lambda self : None;
    def getColor(self): return _Freestyle.StrokeAttribute_getColor(self)
    def getColorR(self): return _Freestyle.StrokeAttribute_getColorR(self)
    def getColorG(self): return _Freestyle.StrokeAttribute_getColorG(self)
    def getColorB(self): return _Freestyle.StrokeAttribute_getColorB(self)
    def getColorRGB(self): return _Freestyle.StrokeAttribute_getColorRGB(self)
    def getAlpha(self): return _Freestyle.StrokeAttribute_getAlpha(self)
    def getThickness(self): return _Freestyle.StrokeAttribute_getThickness(self)
    def getThicknessR(self): return _Freestyle.StrokeAttribute_getThicknessR(self)
    def getThicknessL(self): return _Freestyle.StrokeAttribute_getThicknessL(self)
    def getThicknessRL(self): return _Freestyle.StrokeAttribute_getThicknessRL(self)
    def isVisible(self): return _Freestyle.StrokeAttribute_isVisible(self)
    def getAttributeReal(self, *args): return _Freestyle.StrokeAttribute_getAttributeReal(self, *args)
    def getAttributeVec2f(self, *args): return _Freestyle.StrokeAttribute_getAttributeVec2f(self, *args)
    def getAttributeVec3f(self, *args): return _Freestyle.StrokeAttribute_getAttributeVec3f(self, *args)
    def isAttributeAvailableReal(self, *args): return _Freestyle.StrokeAttribute_isAttributeAvailableReal(self, *args)
    def isAttributeAvailableVec2f(self, *args): return _Freestyle.StrokeAttribute_isAttributeAvailableVec2f(self, *args)
    def isAttributeAvailableVec3f(self, *args): return _Freestyle.StrokeAttribute_isAttributeAvailableVec3f(self, *args)
    def setColor(self, *args): return _Freestyle.StrokeAttribute_setColor(self, *args)
    def setColorID(self, *args): return _Freestyle.StrokeAttribute_setColorID(self, *args)
    def getColorID(self): return _Freestyle.StrokeAttribute_getColorID(self)
    def getColorIDR(self): return _Freestyle.StrokeAttribute_getColorIDR(self)
    def getColorIDG(self): return _Freestyle.StrokeAttribute_getColorIDG(self)
    def getColorIDB(self): return _Freestyle.StrokeAttribute_getColorIDB(self)
    def setAlpha(self, *args): return _Freestyle.StrokeAttribute_setAlpha(self, *args)
    def setThickness(self, *args): return _Freestyle.StrokeAttribute_setThickness(self, *args)
    def SetVisible(self, *args): return _Freestyle.StrokeAttribute_SetVisible(self, *args)
    def setAttributeReal(self, *args): return _Freestyle.StrokeAttribute_setAttributeReal(self, *args)
    def setAttributeVec2f(self, *args): return _Freestyle.StrokeAttribute_setAttributeVec2f(self, *args)
    def setAttributeVec3f(self, *args): return _Freestyle.StrokeAttribute_setAttributeVec3f(self, *args)
StrokeAttribute_swigregister = _Freestyle.StrokeAttribute_swigregister
StrokeAttribute_swigregister(StrokeAttribute)

class StrokeVertex(CurvePoint):
    __swig_setmethods__ = {}
    for _s in [CurvePoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeVertex, name, value)
    __swig_getmethods__ = {}
    for _s in [CurvePoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeVertex, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.StrokeVertex_getExactTypeName(self)
    def __init__(self, *args): 
        this = _Freestyle.new_StrokeVertex(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_StrokeVertex
    __del__ = lambda self : None;
    def x(self): return _Freestyle.StrokeVertex_x(self)
    def y(self): return _Freestyle.StrokeVertex_y(self)
    def z(self): return _Freestyle.StrokeVertex_z(self)
    def getPoint(self): return _Freestyle.StrokeVertex_getPoint(self)
    def attribute(self, *args): return _Freestyle.StrokeVertex_attribute(self, *args)
    def curvilinearAbscissa(self): return _Freestyle.StrokeVertex_curvilinearAbscissa(self)
    def strokeLength(self): return _Freestyle.StrokeVertex_strokeLength(self)
    def u(self): return _Freestyle.StrokeVertex_u(self)
    def SetX(self, *args): return _Freestyle.StrokeVertex_SetX(self, *args)
    def SetY(self, *args): return _Freestyle.StrokeVertex_SetY(self, *args)
    def SetPoint(self, *args): return _Freestyle.StrokeVertex_SetPoint(self, *args)
    def SetAttribute(self, *args): return _Freestyle.StrokeVertex_SetAttribute(self, *args)
    def SetCurvilinearAbscissa(self, *args): return _Freestyle.StrokeVertex_SetCurvilinearAbscissa(self, *args)
    def SetStrokeLength(self, *args): return _Freestyle.StrokeVertex_SetStrokeLength(self, *args)
StrokeVertex_swigregister = _Freestyle.StrokeVertex_swigregister
StrokeVertex_swigregister(StrokeVertex)

class Stroke(Interface1D):
    __swig_setmethods__ = {}
    for _s in [Interface1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stroke, name, value)
    __swig_getmethods__ = {}
    for _s in [Interface1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stroke, name)
    __repr__ = _swig_repr
    def getExactTypeName(self): return _Freestyle.Stroke_getExactTypeName(self)
    def getId(self): return _Freestyle.Stroke_getId(self)
    DRY_MEDIUM = _Freestyle.Stroke_DRY_MEDIUM
    HUMID_MEDIUM = _Freestyle.Stroke_HUMID_MEDIUM
    OPAQUE_MEDIUM = _Freestyle.Stroke_OPAQUE_MEDIUM
    def __init__(self, *args): 
        this = _Freestyle.new_Stroke(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Stroke
    __del__ = lambda self : None;
    def ComputeSampling(self, *args): return _Freestyle.Stroke_ComputeSampling(self, *args)
    def Resample(self, *args): return _Freestyle.Stroke_Resample(self, *args)
    def RemoveVertex(self, *args): return _Freestyle.Stroke_RemoveVertex(self, *args)
    def InsertVertex(self, *args): return _Freestyle.Stroke_InsertVertex(self, *args)
    def Render(self, *args): return _Freestyle.Stroke_Render(self, *args)
    def RenderBasic(self, *args): return _Freestyle.Stroke_RenderBasic(self, *args)
    def getLength2D(self): return _Freestyle.Stroke_getLength2D(self)
    def getMediumType(self): return _Freestyle.Stroke_getMediumType(self)
    def getTextureId(self): return _Freestyle.Stroke_getTextureId(self)
    def hasTips(self): return _Freestyle.Stroke_hasTips(self)
    def vertices_size(self): return _Freestyle.Stroke_vertices_size(self)
    def viewedges_begin(self, *args): return _Freestyle.Stroke_viewedges_begin(self, *args)
    def viewedges_end(self, *args): return _Freestyle.Stroke_viewedges_end(self, *args)
    def viewedges_size(self): return _Freestyle.Stroke_viewedges_size(self)
    def getBeginningOrientation(self): return _Freestyle.Stroke_getBeginningOrientation(self)
    def getBeginningOrientationX(self): return _Freestyle.Stroke_getBeginningOrientationX(self)
    def getBeginningOrientationY(self): return _Freestyle.Stroke_getBeginningOrientationY(self)
    def getEndingOrientation(self): return _Freestyle.Stroke_getEndingOrientation(self)
    def getEndingOrientationX(self): return _Freestyle.Stroke_getEndingOrientationX(self)
    def getEndingOrientationY(self): return _Freestyle.Stroke_getEndingOrientationY(self)
    def SetId(self, *args): return _Freestyle.Stroke_SetId(self, *args)
    def SetLength(self, *args): return _Freestyle.Stroke_SetLength(self, *args)
    def SetMediumType(self, *args): return _Freestyle.Stroke_SetMediumType(self, *args)
    def SetTextureId(self, *args): return _Freestyle.Stroke_SetTextureId(self, *args)
    def SetTips(self, *args): return _Freestyle.Stroke_SetTips(self, *args)
    def push_back(self, *args): return _Freestyle.Stroke_push_back(self, *args)
    def push_front(self, *args): return _Freestyle.Stroke_push_front(self, *args)
    def AddViewEdge(self, *args): return _Freestyle.Stroke_AddViewEdge(self, *args)
    def SetBeginningOrientation(self, *args): return _Freestyle.Stroke_SetBeginningOrientation(self, *args)
    def SetEndingOrientation(self, *args): return _Freestyle.Stroke_SetEndingOrientation(self, *args)
    def strokeVerticesBegin(self, t=0.): return _Freestyle.Stroke_strokeVerticesBegin(self, t)
    def strokeVerticesEnd(self): return _Freestyle.Stroke_strokeVerticesEnd(self)
    def strokeVerticesSize(self): return _Freestyle.Stroke_strokeVerticesSize(self)
    def verticesBegin(self): return _Freestyle.Stroke_verticesBegin(self)
    def verticesEnd(self): return _Freestyle.Stroke_verticesEnd(self)
    def pointsBegin(self, t=0.): return _Freestyle.Stroke_pointsBegin(self, t)
    def pointsEnd(self, t=0.): return _Freestyle.Stroke_pointsEnd(self, t)
Stroke_swigregister = _Freestyle.Stroke_swigregister
Stroke_swigregister(Stroke)

class ShadersContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShadersContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShadersContainer, name)
    __repr__ = _swig_repr
    def iterator(self): return _Freestyle.ShadersContainer_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Freestyle.ShadersContainer___nonzero__(self)
    def __bool__(self): return _Freestyle.ShadersContainer___bool__(self)
    def __len__(self): return _Freestyle.ShadersContainer___len__(self)
    def pop(self): return _Freestyle.ShadersContainer_pop(self)
    def __getslice__(self, *args): return _Freestyle.ShadersContainer___getslice__(self, *args)
    def __setslice__(self, *args): return _Freestyle.ShadersContainer___setslice__(self, *args)
    def __delslice__(self, *args): return _Freestyle.ShadersContainer___delslice__(self, *args)
    def __delitem__(self, *args): return _Freestyle.ShadersContainer___delitem__(self, *args)
    def __getitem__(self, *args): return _Freestyle.ShadersContainer___getitem__(self, *args)
    def __setitem__(self, *args): return _Freestyle.ShadersContainer___setitem__(self, *args)
    def append(self, *args): return _Freestyle.ShadersContainer_append(self, *args)
    def empty(self): return _Freestyle.ShadersContainer_empty(self)
    def size(self): return _Freestyle.ShadersContainer_size(self)
    def clear(self): return _Freestyle.ShadersContainer_clear(self)
    def swap(self, *args): return _Freestyle.ShadersContainer_swap(self, *args)
    def get_allocator(self): return _Freestyle.ShadersContainer_get_allocator(self)
    def begin(self): return _Freestyle.ShadersContainer_begin(self)
    def end(self): return _Freestyle.ShadersContainer_end(self)
    def rbegin(self): return _Freestyle.ShadersContainer_rbegin(self)
    def rend(self): return _Freestyle.ShadersContainer_rend(self)
    def pop_back(self): return _Freestyle.ShadersContainer_pop_back(self)
    def erase(self, *args): return _Freestyle.ShadersContainer_erase(self, *args)
    def __init__(self, *args): 
        this = _Freestyle.new_ShadersContainer(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Freestyle.ShadersContainer_push_back(self, *args)
    def front(self): return _Freestyle.ShadersContainer_front(self)
    def back(self): return _Freestyle.ShadersContainer_back(self)
    def assign(self, *args): return _Freestyle.ShadersContainer_assign(self, *args)
    def resize(self, *args): return _Freestyle.ShadersContainer_resize(self, *args)
    def insert(self, *args): return _Freestyle.ShadersContainer_insert(self, *args)
    def reserve(self, *args): return _Freestyle.ShadersContainer_reserve(self, *args)
    def capacity(self): return _Freestyle.ShadersContainer_capacity(self)
    __swig_destroy__ = _Freestyle.delete_ShadersContainer
    __del__ = lambda self : None;
ShadersContainer_swigregister = _Freestyle.ShadersContainer_swigregister
ShadersContainer_swigregister(ShadersContainer)

class StrokeShader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeShader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeShader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == StrokeShader:
            _self = None
        else:
            _self = self
        this = _Freestyle.new_StrokeShader(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_StrokeShader
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.StrokeShader_getName(self)
    def shade(self, *args): return _Freestyle.StrokeShader_shade(self, *args)
    def __disown__(self):
        self.this.disown()
        _Freestyle.disown_StrokeShader(self)
        return weakref_proxy(self)
StrokeShader_swigregister = _Freestyle.StrokeShader_swigregister
StrokeShader_swigregister(StrokeShader)

class ConstantThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ConstantThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ConstantThicknessShader
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.ConstantThicknessShader_getName(self)
    def shade(self, *args): return _Freestyle.ConstantThicknessShader_shade(self, *args)
ConstantThicknessShader_swigregister = _Freestyle.ConstantThicknessShader_swigregister
ConstantThicknessShader_swigregister(ConstantThicknessShader)

class ConstantExternThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantExternThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantExternThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ConstantExternThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ConstantExternThicknessShader
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.ConstantExternThicknessShader_getName(self)
    def shade(self, *args): return _Freestyle.ConstantExternThicknessShader_shade(self, *args)
ConstantExternThicknessShader_swigregister = _Freestyle.ConstantExternThicknessShader_swigregister
ConstantExternThicknessShader_swigregister(ConstantExternThicknessShader)

class IncreasingThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncreasingThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncreasingThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_IncreasingThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_IncreasingThicknessShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.IncreasingThicknessShader_shade(self, *args)
IncreasingThicknessShader_swigregister = _Freestyle.IncreasingThicknessShader_swigregister
IncreasingThicknessShader_swigregister(IncreasingThicknessShader)

class ConstrainedIncreasingThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstrainedIncreasingThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstrainedIncreasingThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ConstrainedIncreasingThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ConstrainedIncreasingThicknessShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.ConstrainedIncreasingThicknessShader_shade(self, *args)
ConstrainedIncreasingThicknessShader_swigregister = _Freestyle.ConstrainedIncreasingThicknessShader_swigregister
ConstrainedIncreasingThicknessShader_swigregister(ConstrainedIncreasingThicknessShader)

class LengthDependingThicknessShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LengthDependingThicknessShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LengthDependingThicknessShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_LengthDependingThicknessShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_LengthDependingThicknessShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.LengthDependingThicknessShader_shade(self, *args)
LengthDependingThicknessShader_swigregister = _Freestyle.LengthDependingThicknessShader_swigregister
LengthDependingThicknessShader_swigregister(LengthDependingThicknessShader)

class ThicknessVariationPatternShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThicknessVariationPatternShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThicknessVariationPatternShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ThicknessVariationPatternShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ThicknessVariationPatternShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.ThicknessVariationPatternShader_shade(self, *args)
ThicknessVariationPatternShader_swigregister = _Freestyle.ThicknessVariationPatternShader_swigregister
ThicknessVariationPatternShader_swigregister(ThicknessVariationPatternShader)

class ThicknessNoiseShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ThicknessNoiseShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ThicknessNoiseShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ThicknessNoiseShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.ThicknessNoiseShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_ThicknessNoiseShader
    __del__ = lambda self : None;
ThicknessNoiseShader_swigregister = _Freestyle.ThicknessNoiseShader_swigregister
ThicknessNoiseShader_swigregister(ThicknessNoiseShader)

class ConstantColorShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstantColorShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConstantColorShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ConstantColorShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def getName(self): return _Freestyle.ConstantColorShader_getName(self)
    def shade(self, *args): return _Freestyle.ConstantColorShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_ConstantColorShader
    __del__ = lambda self : None;
ConstantColorShader_swigregister = _Freestyle.ConstantColorShader_swigregister
ConstantColorShader_swigregister(ConstantColorShader)

class IncreasingColorShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IncreasingColorShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IncreasingColorShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_IncreasingColorShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.IncreasingColorShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_IncreasingColorShader
    __del__ = lambda self : None;
IncreasingColorShader_swigregister = _Freestyle.IncreasingColorShader_swigregister
IncreasingColorShader_swigregister(IncreasingColorShader)

class ColorVariationPatternShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorVariationPatternShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorVariationPatternShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ColorVariationPatternShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ColorVariationPatternShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.ColorVariationPatternShader_shade(self, *args)
ColorVariationPatternShader_swigregister = _Freestyle.ColorVariationPatternShader_swigregister
ColorVariationPatternShader_swigregister(ColorVariationPatternShader)

class MaterialColorShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialColorShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialColorShader, name)
    __repr__ = _swig_repr
    def __init__(self, coeff=1.): 
        this = _Freestyle.new_MaterialColorShader(coeff)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.MaterialColorShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_MaterialColorShader
    __del__ = lambda self : None;
MaterialColorShader_swigregister = _Freestyle.MaterialColorShader_swigregister
MaterialColorShader_swigregister(MaterialColorShader)

class CalligraphicColorShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalligraphicColorShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CalligraphicColorShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_CalligraphicColorShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.CalligraphicColorShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_CalligraphicColorShader
    __del__ = lambda self : None;
CalligraphicColorShader_swigregister = _Freestyle.CalligraphicColorShader_swigregister
CalligraphicColorShader_swigregister(CalligraphicColorShader)

class ColorNoiseShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorNoiseShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorNoiseShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_ColorNoiseShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.ColorNoiseShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_ColorNoiseShader
    __del__ = lambda self : None;
ColorNoiseShader_swigregister = _Freestyle.ColorNoiseShader_swigregister
ColorNoiseShader_swigregister(ColorNoiseShader)

class TextureAssignerShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureAssignerShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextureAssignerShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_TextureAssignerShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.TextureAssignerShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_TextureAssignerShader
    __del__ = lambda self : None;
TextureAssignerShader_swigregister = _Freestyle.TextureAssignerShader_swigregister
TextureAssignerShader_swigregister(TextureAssignerShader)

class StrokeTextureShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrokeTextureShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StrokeTextureShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_StrokeTextureShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.StrokeTextureShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_StrokeTextureShader
    __del__ = lambda self : None;
StrokeTextureShader_swigregister = _Freestyle.StrokeTextureShader_swigregister
StrokeTextureShader_swigregister(StrokeTextureShader)

class BackboneStretcherShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BackboneStretcherShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BackboneStretcherShader, name)
    __repr__ = _swig_repr
    def __init__(self, iAmount=2.): 
        this = _Freestyle.new_BackboneStretcherShader(iAmount)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.BackboneStretcherShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_BackboneStretcherShader
    __del__ = lambda self : None;
BackboneStretcherShader_swigregister = _Freestyle.BackboneStretcherShader_swigregister
BackboneStretcherShader_swigregister(BackboneStretcherShader)

class SamplingShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SamplingShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SamplingShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_SamplingShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.SamplingShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_SamplingShader
    __del__ = lambda self : None;
SamplingShader_swigregister = _Freestyle.SamplingShader_swigregister
SamplingShader_swigregister(SamplingShader)

class ExternalContourStretcherShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExternalContourStretcherShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExternalContourStretcherShader, name)
    __repr__ = _swig_repr
    def __init__(self, iAmount=2.): 
        this = _Freestyle.new_ExternalContourStretcherShader(iAmount)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.ExternalContourStretcherShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_ExternalContourStretcherShader
    __del__ = lambda self : None;
ExternalContourStretcherShader_swigregister = _Freestyle.ExternalContourStretcherShader_swigregister
ExternalContourStretcherShader_swigregister(ExternalContourStretcherShader)

class BSplineShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BSplineShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BSplineShader, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _Freestyle.new_BSplineShader()
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.BSplineShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_BSplineShader
    __del__ = lambda self : None;
BSplineShader_swigregister = _Freestyle.BSplineShader_swigregister
BSplineShader_swigregister(BSplineShader)

class BezierCurveShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BezierCurveShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BezierCurveShader, name)
    __repr__ = _swig_repr
    def __init__(self, error=4.0): 
        this = _Freestyle.new_BezierCurveShader(error)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.BezierCurveShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_BezierCurveShader
    __del__ = lambda self : None;
BezierCurveShader_swigregister = _Freestyle.BezierCurveShader_swigregister
BezierCurveShader_swigregister(BezierCurveShader)

class InflateShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InflateShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InflateShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_InflateShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.InflateShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_InflateShader
    __del__ = lambda self : None;
InflateShader_swigregister = _Freestyle.InflateShader_swigregister
InflateShader_swigregister(InflateShader)

class PolygonalizationShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolygonalizationShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PolygonalizationShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_PolygonalizationShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.PolygonalizationShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_PolygonalizationShader
    __del__ = lambda self : None;
PolygonalizationShader_swigregister = _Freestyle.PolygonalizationShader_swigregister
PolygonalizationShader_swigregister(PolygonalizationShader)

class GuidingLinesShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GuidingLinesShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GuidingLinesShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_GuidingLinesShader(*args)
        try: self.this.append(this)
        except: self.this = this
    def shade(self, *args): return _Freestyle.GuidingLinesShader_shade(self, *args)
    __swig_destroy__ = _Freestyle.delete_GuidingLinesShader
    __del__ = lambda self : None;
GuidingLinesShader_swigregister = _Freestyle.GuidingLinesShader_swigregister
GuidingLinesShader_swigregister(GuidingLinesShader)

class TipRemoverShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TipRemoverShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TipRemoverShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_TipRemoverShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_TipRemoverShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.TipRemoverShader_shade(self, *args)
TipRemoverShader_swigregister = _Freestyle.TipRemoverShader_swigregister
TipRemoverShader_swigregister(TipRemoverShader)

class streamShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, streamShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, streamShader, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _Freestyle.delete_streamShader
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.streamShader_getName(self)
    def shade(self, *args): return _Freestyle.streamShader_shade(self, *args)
    def __init__(self): 
        this = _Freestyle.new_streamShader()
        try: self.this.append(this)
        except: self.this = this
streamShader_swigregister = _Freestyle.streamShader_swigregister
streamShader_swigregister(streamShader)

class fstreamShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, fstreamShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, fstreamShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_fstreamShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_fstreamShader
    __del__ = lambda self : None;
    def getName(self): return _Freestyle.fstreamShader_getName(self)
    def shade(self, *args): return _Freestyle.fstreamShader_shade(self, *args)
fstreamShader_swigregister = _Freestyle.fstreamShader_swigregister
fstreamShader_swigregister(fstreamShader)

class CalligraphicShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalligraphicShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CalligraphicShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_CalligraphicShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_CalligraphicShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.CalligraphicShader_shade(self, *args)
CalligraphicShader_swigregister = _Freestyle.CalligraphicShader_swigregister
CalligraphicShader_swigregister(CalligraphicShader)

class SpatialNoiseShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpatialNoiseShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpatialNoiseShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_SpatialNoiseShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_SpatialNoiseShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.SpatialNoiseShader_shade(self, *args)
SpatialNoiseShader_swigregister = _Freestyle.SpatialNoiseShader_swigregister
SpatialNoiseShader_swigregister(SpatialNoiseShader)

class SmoothingShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmoothingShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SmoothingShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_SmoothingShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_SmoothingShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.SmoothingShader_shade(self, *args)
SmoothingShader_swigregister = _Freestyle.SmoothingShader_swigregister
SmoothingShader_swigregister(SmoothingShader)

class Smoother(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Smoother, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Smoother, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Smoother(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Smoother
    __del__ = lambda self : None;
    def smooth(self, *args): return _Freestyle.Smoother_smooth(self, *args)
    def computeCurvature(self): return _Freestyle.Smoother_computeCurvature(self)
Smoother_swigregister = _Freestyle.Smoother_swigregister
Smoother_swigregister(Smoother)

class Omitter(Smoother):
    __swig_setmethods__ = {}
    for _s in [Smoother]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Omitter, name, value)
    __swig_getmethods__ = {}
    for _s in [Smoother]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Omitter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_Omitter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_Omitter
    __del__ = lambda self : None;
    def omit(self, *args): return _Freestyle.Omitter_omit(self, *args)
Omitter_swigregister = _Freestyle.Omitter_swigregister
Omitter_swigregister(Omitter)

class OmissionShader(StrokeShader):
    __swig_setmethods__ = {}
    for _s in [StrokeShader]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OmissionShader, name, value)
    __swig_getmethods__ = {}
    for _s in [StrokeShader]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OmissionShader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Freestyle.new_OmissionShader(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_OmissionShader
    __del__ = lambda self : None;
    def shade(self, *args): return _Freestyle.OmissionShader_shade(self, *args)
OmissionShader_swigregister = _Freestyle.OmissionShader_swigregister
OmissionShader_swigregister(OmissionShader)

class Operators(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Operators, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Operators, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["select"] = lambda x: _Freestyle.Operators_select
    if _newclass:select = staticmethod(_Freestyle.Operators_select)
    __swig_getmethods__["chain"] = lambda x: _Freestyle.Operators_chain
    if _newclass:chain = staticmethod(_Freestyle.Operators_chain)
    __swig_getmethods__["bidirectionalChain"] = lambda x: _Freestyle.Operators_bidirectionalChain
    if _newclass:bidirectionalChain = staticmethod(_Freestyle.Operators_bidirectionalChain)
    __swig_getmethods__["sequentialSplit"] = lambda x: _Freestyle.Operators_sequentialSplit
    if _newclass:sequentialSplit = staticmethod(_Freestyle.Operators_sequentialSplit)
    __swig_getmethods__["recursiveSplit"] = lambda x: _Freestyle.Operators_recursiveSplit
    if _newclass:recursiveSplit = staticmethod(_Freestyle.Operators_recursiveSplit)
    __swig_getmethods__["sort"] = lambda x: _Freestyle.Operators_sort
    if _newclass:sort = staticmethod(_Freestyle.Operators_sort)
    __swig_getmethods__["create"] = lambda x: _Freestyle.Operators_create
    if _newclass:create = staticmethod(_Freestyle.Operators_create)
    __swig_getmethods__["getViewEdgeFromIndex"] = lambda x: _Freestyle.Operators_getViewEdgeFromIndex
    if _newclass:getViewEdgeFromIndex = staticmethod(_Freestyle.Operators_getViewEdgeFromIndex)
    __swig_getmethods__["getChainFromIndex"] = lambda x: _Freestyle.Operators_getChainFromIndex
    if _newclass:getChainFromIndex = staticmethod(_Freestyle.Operators_getChainFromIndex)
    __swig_getmethods__["getStrokeFromIndex"] = lambda x: _Freestyle.Operators_getStrokeFromIndex
    if _newclass:getStrokeFromIndex = staticmethod(_Freestyle.Operators_getStrokeFromIndex)
    __swig_getmethods__["getViewEdgesSize"] = lambda x: _Freestyle.Operators_getViewEdgesSize
    if _newclass:getViewEdgesSize = staticmethod(_Freestyle.Operators_getViewEdgesSize)
    __swig_getmethods__["getChainsSize"] = lambda x: _Freestyle.Operators_getChainsSize
    if _newclass:getChainsSize = staticmethod(_Freestyle.Operators_getChainsSize)
    __swig_getmethods__["getStrokesSize"] = lambda x: _Freestyle.Operators_getStrokesSize
    if _newclass:getStrokesSize = staticmethod(_Freestyle.Operators_getStrokesSize)
    __swig_destroy__ = _Freestyle.delete_Operators
    __del__ = lambda self : None;
Operators_swigregister = _Freestyle.Operators_swigregister
Operators_swigregister(Operators)

def Operators_select(*args):
  return _Freestyle.Operators_select(*args)
Operators_select = _Freestyle.Operators_select

def Operators_chain(*args):
  return _Freestyle.Operators_chain(*args)
Operators_chain = _Freestyle.Operators_chain

def Operators_bidirectionalChain(*args):
  return _Freestyle.Operators_bidirectionalChain(*args)
Operators_bidirectionalChain = _Freestyle.Operators_bidirectionalChain

def Operators_sequentialSplit(*args):
  return _Freestyle.Operators_sequentialSplit(*args)
Operators_sequentialSplit = _Freestyle.Operators_sequentialSplit

def Operators_recursiveSplit(*args):
  return _Freestyle.Operators_recursiveSplit(*args)
Operators_recursiveSplit = _Freestyle.Operators_recursiveSplit

def Operators_sort(*args):
  return _Freestyle.Operators_sort(*args)
Operators_sort = _Freestyle.Operators_sort

def Operators_create(*args):
  return _Freestyle.Operators_create(*args)
Operators_create = _Freestyle.Operators_create

def Operators_getViewEdgeFromIndex(*args):
  return _Freestyle.Operators_getViewEdgeFromIndex(*args)
Operators_getViewEdgeFromIndex = _Freestyle.Operators_getViewEdgeFromIndex

def Operators_getChainFromIndex(*args):
  return _Freestyle.Operators_getChainFromIndex(*args)
Operators_getChainFromIndex = _Freestyle.Operators_getChainFromIndex

def Operators_getStrokeFromIndex(*args):
  return _Freestyle.Operators_getStrokeFromIndex(*args)
Operators_getStrokeFromIndex = _Freestyle.Operators_getStrokeFromIndex

def Operators_getViewEdgesSize():
  return _Freestyle.Operators_getViewEdgesSize()
Operators_getViewEdgesSize = _Freestyle.Operators_getViewEdgesSize

def Operators_getChainsSize():
  return _Freestyle.Operators_getChainsSize()
Operators_getChainsSize = _Freestyle.Operators_getChainsSize

def Operators_getStrokesSize():
  return _Freestyle.Operators_getStrokesSize()
Operators_getStrokesSize = _Freestyle.Operators_getStrokesSize

class ltstr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ltstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ltstr, name)
    __repr__ = _swig_repr
    def __call__(self, *args): return _Freestyle.ltstr___call__(self, *args)
    def __init__(self): 
        this = _Freestyle.new_ltstr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Freestyle.delete_ltstr
    __del__ = lambda self : None;
ltstr_swigregister = _Freestyle.ltstr_swigregister
ltstr_swigregister(ltstr)

class Canvas(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Canvas, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Canvas, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["getInstance"] = lambda x: _Freestyle.Canvas_getInstance
    if _newclass:getInstance = staticmethod(_Freestyle.Canvas_getInstance)
    NB_STEERABLE_VIEWMAP = _Freestyle.Canvas_NB_STEERABLE_VIEWMAP
    __swig_destroy__ = _Freestyle.delete_Canvas
    __del__ = lambda self : None;
    def preDraw(self): return _Freestyle.Canvas_preDraw(self)
    def Draw(self): return _Freestyle.Canvas_Draw(self)
    def postDraw(self): return _Freestyle.Canvas_postDraw(self)
    def RenderLayer(self, *args): return _Freestyle.Canvas_RenderLayer(self, *args)
    def Render(self, *args): return _Freestyle.Canvas_Render(self, *args)
    def RenderBasic(self, *args): return _Freestyle.Canvas_RenderBasic(self, *args)
    def RenderStroke(self, *args): return _Freestyle.Canvas_RenderStroke(self, *args)
    def init(self): return _Freestyle.Canvas_init(self)
    def Clear(self): return _Freestyle.Canvas_Clear(self)
    def Erase(self): return _Freestyle.Canvas_Erase(self)
    def readColorPixels(self, *args): return _Freestyle.Canvas_readColorPixels(self, *args)
    def readDepthPixels(self, *args): return _Freestyle.Canvas_readDepthPixels(self, *args)
    def update(self): return _Freestyle.Canvas_update(self)
    def isEmpty(self): return _Freestyle.Canvas_isEmpty(self)
    def loadMap(self, *args): return _Freestyle.Canvas_loadMap(self, *args)
    def readMapPixel(self, *args): return _Freestyle.Canvas_readMapPixel(self, *args)
    def loadSteerableViewMap(self, *args): return _Freestyle.Canvas_loadSteerableViewMap(self, *args)
    def getSteerableViewMap(self): return _Freestyle.Canvas_getSteerableViewMap(self)
    def selectedFEdge(self, *args): return _Freestyle.Canvas_selectedFEdge(self, *args)
    def width(self): return _Freestyle.Canvas_width(self)
    def height(self): return _Freestyle.Canvas_height(self)
    def currentPaperTextureIndex(self): return _Freestyle.Canvas_currentPaperTextureIndex(self)
    def scene3DBBox(self): return _Freestyle.Canvas_scene3DBBox(self)
    def renderer(self): return _Freestyle.Canvas_renderer(self)
    def getCurrentStyleModule(self): return _Freestyle.Canvas_getCurrentStyleModule(self)
    def getStyleModule(self, *args): return _Freestyle.Canvas_getStyleModule(self, *args)
    def getNumStyleModules(self): return _Freestyle.Canvas_getNumStyleModules(self)
    def getRecordFlag(self): return _Freestyle.Canvas_getRecordFlag(self)
    def SetSelectedFEdge(self, *args): return _Freestyle.Canvas_SetSelectedFEdge(self, *args)
    def InsertStyleModule(self, *args): return _Freestyle.Canvas_InsertStyleModule(self, *args)
    def RemoveStyleModule(self, *args): return _Freestyle.Canvas_RemoveStyleModule(self, *args)
    def SwapStyleModules(self, *args): return _Freestyle.Canvas_SwapStyleModules(self, *args)
    def ReplaceStyleModule(self, *args): return _Freestyle.Canvas_ReplaceStyleModule(self, *args)
    def SetVisible(self, *args): return _Freestyle.Canvas_SetVisible(self, *args)
    def AddLayer(self, *args): return _Freestyle.Canvas_AddLayer(self, *args)
    def SetCurrentPaperTextureIndex(self, *args): return _Freestyle.Canvas_SetCurrentPaperTextureIndex(self, *args)
    def changePaperTexture(self, increment=True): return _Freestyle.Canvas_changePaperTexture(self, increment)
    def togglePaperTexture(self): return _Freestyle.Canvas_togglePaperTexture(self)
    def resetModified(self, iMod=False): return _Freestyle.Canvas_resetModified(self, iMod)
    def causalStyleModules(self, *args): return _Freestyle.Canvas_causalStyleModules(self, *args)
    def setModified(self, *args): return _Freestyle.Canvas_setModified(self, *args)
Canvas_swigregister = _Freestyle.Canvas_swigregister
Canvas_swigregister(Canvas)

def Canvas_getInstance():
  return _Freestyle.Canvas_getInstance()
Canvas_getInstance = _Freestyle.Canvas_getInstance


def castToSVertex(*args):
  return _Freestyle.castToSVertex(*args)
castToSVertex = _Freestyle.castToSVertex

def castToViewVertex(*args):
  return _Freestyle.castToViewVertex(*args)
castToViewVertex = _Freestyle.castToViewVertex

def castToTVertex(*args):
  return _Freestyle.castToTVertex(*args)
castToTVertex = _Freestyle.castToTVertex

def castToCurvePoint(*args):
  return _Freestyle.castToCurvePoint(*args)
castToCurvePoint = _Freestyle.castToCurvePoint

def castToStrokeVertex(*args):
  return _Freestyle.castToStrokeVertex(*args)
castToStrokeVertex = _Freestyle.castToStrokeVertex

def castToNonTVertex(*args):
  return _Freestyle.castToNonTVertex(*args)
castToNonTVertex = _Freestyle.castToNonTVertex

def castToFEdge(*args):
  return _Freestyle.castToFEdge(*args)
castToFEdge = _Freestyle.castToFEdge

def castToViewEdge(*args):
  return _Freestyle.castToViewEdge(*args)
castToViewEdge = _Freestyle.castToViewEdge

def castToStroke(*args):
  return _Freestyle.castToStroke(*args)
castToStroke = _Freestyle.castToStroke

def castToChain(*args):
  return _Freestyle.castToChain(*args)
castToChain = _Freestyle.castToChain
# This file is compatible with both classic and new-style classes.


